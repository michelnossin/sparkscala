{
  "paragraphs": [
    {
      "text": "%md\n\nLets get some api which does not require any authentication. This one shows some Train information in Json:\nhttps://www.septastats.com/api\nfor example:\nhttps://www.septastats.com/api/current/system/latest\n\nSome other link to read: http://randerzander.github.io/#?post\u003ddata-apps.md\n",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 7:04:38 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eLets get some api which does not require any authentication. This one shows some Train information in Json:\u003cbr/\u003e\u003ca href\u003d\"https://www.septastats.com/api\"\u003ehttps://www.septastats.com/api\u003c/a\u003e\u003cbr/\u003efor example:\u003cbr/\u003e\u003ca href\u003d\"https://www.septastats.com/api/current/system/latest\"\u003ehttps://www.septastats.com/api/current/system/latest\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eSome other link to read: \u003ca href\u003d\"http://randerzander.github.io/#?post\u003ddata-apps.md\"\u003ehttp://randerzander.github.io/#?post\u003ddata-apps.md\u003c/a\u003e\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1502648053199_-187365512",
      "id": "20170813-181413_407884137",
      "dateCreated": "Aug 13, 2017 6:14:13 PM",
      "dateStarted": "Aug 13, 2017 7:04:38 PM",
      "dateFinished": "Aug 13, 2017 7:04:38 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Dependency for next steps",
      "text": "%dep\n \nz.load(\"org.scalaj:scalaj-http_2.10:2.2.1\")\nz.load(\"org.json4s:json4s-native_2.10:3.2.11\")",
      "user": "anonymous",
      "dateUpdated": "Aug 19, 2017 11:10:27 AM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "res0: org.apache.zeppelin.dep.Dependency \u003d org.apache.zeppelin.dep.Dependency@2f755320\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1502658858007_1887163028",
      "id": "20170813-211418_570037273",
      "dateCreated": "Aug 13, 2017 9:14:18 PM",
      "dateStarted": "Aug 19, 2017 11:10:27 AM",
      "dateFinished": "Aug 19, 2017 11:10:32 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Call api in simple Scala (run late, trains don\u0027t run at American nights)",
      "text": "val url \u003d \"https://www.septastats.com/api/current/system/latest\"\nval result \u003d scala.io.Source.fromURL(url).mkString\nprintln(result)\n",
      "user": "anonymous",
      "dateUpdated": "Aug 19, 2017 11:52:18 AM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\nurl: String \u003d https://www.septastats.com/api/current/system/latest\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nresult: String \u003d\n{\n    \"metadata\": {\n        \"elapsed\": 0.73870897293091,\n        \"_comment\": \"Info on all currently running trains.\"\n    },\n    \"data\": [\n        {\n            \"id\": \"1502-Jefferson\",\n            \"time\": \"2017-08-19T07:52:20\",\n            \"late\": \"0\",\n            \"lat\": \"39.9538889\",\n            \"lon\": \"-75.1677778\",\n            \"nextstop\": \"Jefferson Station\",\n            \"source\": \"Thorndale\",\n            \"dest\": \"Jefferson\"\n        },\n        {\n            \"id\": \"1506-Jefferson\",\n            \"time\": \"2017-08-19T07:51:30\",\n            \"late\": \"11\",\n            \"lat\": \"39.99220\",\n            \"lon\": \"-75.76669\",\n            \"nextstop\": \"Thorndale\",\n            \"source\": \"Thorndale\",\n            \"dest\": \"Jefferson\"\n        },\n        {\n            \"id\": \"200-Norristown\",...{\n    \"metadata\": {\n        \"elapsed\": 0.73870897293091,\n        \"_comment\": \"Info on all currently running trains.\"\n    },\n    \"data\": [\n        {\n            \"id\": \"1502-Jefferson\",\n            \"time\": \"2017-08-19T07:52:20\",\n            \"late\": \"0\",\n            \"lat\": \"39.9538889\",\n            \"lon\": \"-75.1677778\",\n            \"nextstop\": \"Jefferson Station\",\n            \"source\": \"Thorndale\",\n            \"dest\": \"Jefferson\"\n        },\n        {\n            \"id\": \"1506-Jefferson\",\n            \"time\": \"2017-08-19T07:51:30\",\n            \"late\": \"11\",\n            \"lat\": \"39.99220\",\n            \"lon\": \"-75.76669\",\n            \"nextstop\": \"Thorndale\",\n            \"source\": \"Thorndale\",\n            \"dest\": \"Jefferson\"\n        },\n        {\n            \"id\": \"200-Norristown\",\n            \"time\": \"2017-08-19T07:52:20\",\n            \"late\": \"5\",\n            \"lat\": \"40.01151\",\n            \"lon\": \"-75.19327\",\n            \"nextstop\": \"Wissahickon\",\n            \"source\": \"Marcus Hook\",\n            \"dest\": \"Norristown\"\n        },\n        {\n            \"id\": \"205-Wilmington\",\n            \"time\": \"2017-08-19T07:52:20\",\n            \"late\": \"5\",\n            \"lat\": \"39.929807\",\n            \"lon\": \"-75.224136\",\n            \"nextstop\": \"Darby\",\n            \"source\": \"Norristown\",\n            \"dest\": \"Wilmington\"\n        },\n        {\n            \"id\": \"207-Marcus Hook\",\n            \"time\": \"2017-08-19T07:52:20\",\n            \"late\": \"0\",\n            \"lat\": \"40.11321\",\n            \"lon\": \"-75.34562\",\n            \"nextstop\": \"Conshohocken\",\n            \"source\": \"Norristown\",\n            \"dest\": \"Marcus Hook\"\n        },\n        {\n            \"id\": \"301-Elwyn\",\n            \"time\": \"2017-08-19T07:48:59\",\n            \"late\": \"0\",\n            \"lat\": \"39.90580\",\n            \"lon\": \"-75.41458\",\n            \"nextstop\": \"Elwyn Station\",\n            \"source\": \"West Trenton\",\n            \"dest\": \"Elwyn\"\n        },\n        {\n            \"id\": \"303-Elwyn\",\n            \"time\": \"2017-08-19T07:52:20\",\n            \"late\": \"0\",\n            \"lat\": \"40.02140\",\n            \"lon\": \"-75.16102\",\n            \"nextstop\": \"Temple U\",\n            \"source\": \"West Trenton\",\n            \"dest\": \"Elwyn\"\n        },\n        {\n            \"id\": \"304-West Trenton\",\n            \"time\": \"2017-08-19T07:52:20\",\n            \"late\": \"7\",\n            \"lat\": \"40.09246\",\n            \"lon\": \"-75.13790\",\n            \"nextstop\": \"Jenkintown-Wyncote\",\n            \"source\": \"Elwyn\",\n            \"dest\": \"West Trenton\"\n        },\n        {\n            \"id\": \"306-West Trenton\",\n            \"time\": \"2017-08-19T07:52:20\",\n            \"late\": \"0\",\n            \"lat\": \"39.91308\",\n            \"lon\": \"-75.31494\",\n            \"nextstop\": \"Secane\",\n            \"source\": \"Elwyn\",\n            \"dest\": \"West Trenton\"\n        },\n        {\n            \"id\": \"408-Warminster\",\n            \"time\": \"2017-08-19T07:52:20\",\n            \"late\": \"0\",\n            \"lat\": \"40.14313\",\n            \"lon\": \"-75.11521\",\n            \"nextstop\": \"Hatboro\",\n            \"source\": \"30th St\",\n            \"dest\": \"Warminster\"\n        },\n        {\n            \"id\": \"417-Airport\",\n            \"time\": \"2017-08-19T07:52:20\",\n            \"late\": \"0\",\n            \"lat\": \"40.10111\",\n            \"lon\": \"-75.15343\",\n            \"nextstop\": \"Jenkintown-Wyncote\",\n            \"source\": \"Warminster\",\n            \"dest\": \"Airport\"\n        },\n        {\n            \"id\": \"500-Doylestown\",\n            \"time\": \"2017-08-19T07:52:20\",\n            \"late\": \"6\",\n            \"lat\": \"40.05972\",\n            \"lon\": \"-75.12936\",\n            \"nextstop\": \"Elkins Park\",\n            \"source\": \"Malvern\",\n            \"dest\": \"Doylestown\"\n        },\n        {\n            \"id\": \"501-Thorndale\",\n            \"time\": \"2017-08-19T07:52:20\",\n            \"late\": \"6\",\n            \"lat\": \"39.95514\",\n            \"lon\": \"-75.17462\",\n            \"nextstop\": \"30th Street Station\",\n            \"source\": \"Doylestown\",\n            \"dest\": \"Thorndale\"\n        },\n        {\n            \"id\": \"504-Doylestown\",\n            \"time\": \"2017-08-19T07:52:20\",\n            \"late\": \"0\",\n            \"lat\": \"40.02833\",\n            \"lon\": \"-75.32765\",\n            \"nextstop\": \"Bryn Mawr\",\n            \"source\": \"Malvern\",\n            \"dest\": \"Doylestown\"\n        },\n        {\n            \"id\": \"505-Malvern\",\n            \"time\": \"2017-08-19T07:52:20\",\n            \"late\": \"0\",\n            \"lat\": \"40.21375\",\n            \"lon\": \"-75.27771\",\n            \"nextstop\": \"Gwynedd Valley\",\n            \"source\": \"Doylestown\",\n            \"dest\": \"Malvern\"\n        },\n        {\n            \"id\": \"702-Chestnut H East\",\n            \"time\": \"2017-08-19T07:52:20\",\n            \"late\": \"0\",\n            \"lat\": \"39.95482\",\n            \"lon\": \"-75.17201\",\n            \"nextstop\": \"Suburban Station\",\n            \"source\": \"Trenton\",\n            \"dest\": \"Chestnut H East\"\n        },\n        {\n            \"id\": \"705-Trenton\",\n            \"time\": \"2017-08-19T07:52:20\",\n            \"late\": \"3\",\n            \"lat\": \"39.96349\",\n            \"lon\": \"-75.18513\",\n            \"nextstop\": \"North Philadelphia\",\n            \"source\": \"Chestnut H East\",\n            \"dest\": \"Trenton\"\n        },\n        {\n            \"id\": \"805-Chestnut H West\",\n            \"time\": \"2017-08-19T07:52:20\",\n            \"late\": \"5\",\n            \"lat\": \"40.05032\",\n            \"lon\": \"-75.19187\",\n            \"nextstop\": \"Allen Lane\",\n            \"source\": \"Fox Chase\",\n            \"dest\": \"Chestnut H West\"\n        },\n        {\n            \"id\": \"807-Chestnut H West\",\n            \"time\": \"2017-08-19T07:52:20\",\n            \"late\": \"0\",\n            \"lat\": \"40.06326\",\n            \"lon\": \"-75.08735\",\n            \"nextstop\": \"Cheltenham\",\n            \"source\": \"Fox Chase\",\n            \"dest\": \"Chestnut H West\"\n        },\n        {\n            \"id\": \"810-Fox Chase\",\n            \"time\": \"2017-08-19T07:52:20\",\n            \"late\": \"4\",\n            \"lat\": \"39.969262\",\n            \"lon\": \"-75.197291\",\n            \"nextstop\": \"30th Street Station\",\n            \"source\": \"Chestnut H West\",\n            \"dest\": \"Fox Chase\"\n        },\n        {\n            \"id\": \"9410-Temple U\",\n            \"time\": \"2017-08-19T07:49:49\",\n            \"late\": \"0\",\n            \"lat\": \"40.01272\",\n            \"lon\": \"-75.16187\",\n            \"nextstop\": \"Temple U\",\n            \"source\": \"30th St\",\n            \"dest\": \"Temple U\"\n        },\n        {\n            \"id\": \"9415-Airport\",\n            \"time\": \"2017-08-19T07:52:20\",\n            \"late\": \"0\",\n            \"lat\": \"39.95344\",\n            \"lon\": \"-75.16376\",\n            \"nextstop\": \"Suburban Station\",\n            \"source\": \"Temple U\",\n            \"dest\": \"Airport\"\n        },\n        {\n            \"id\": \"9501-Malvern\",\n            \"time\": \"2017-08-19T07:51:30\",\n            \"late\": \"14\",\n            \"lat\": \"40.01417\",\n            \"lon\": \"-75.30072\",\n            \"nextstop\": \"Bryn Mawr\",\n            \"source\": \"Temple U\",\n            \"dest\": \"Malvern\"\n        }\n    ]\n}\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1502648435583_-1443974556",
      "id": "20170813-182035_2110339470",
      "dateCreated": "Aug 13, 2017 6:20:35 PM",
      "dateStarted": "Aug 19, 2017 11:52:19 AM",
      "dateFinished": "Aug 19, 2017 11:52:22 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Parse api output to json",
      "text": "%spark\n\ncase class Steps(id:String,time:String,late:String,lat:String,lon:String,nextstop:String,source:String,dest:String)\ncase class ActivitiesStep(`data`: Seq[Steps])\n\nimport org.json4s.{DefaultFormats, JString}\nimport org.json4s.JsonAST.{JArray, JObject}\nimport scalaj.http.{Http, Token, HttpResponse}\nimport org.json4s.native.JsonMethods._\n\nimplicit val formats \u003d DefaultFormats\n\nval jsonResponse \u003d parse(result)\nval activitiesStep \u003d jsonResponse.extract[ActivitiesStep]\n",
      "user": "anonymous",
      "dateUpdated": "Aug 19, 2017 11:52:24 AM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\ndefined class Steps\n\ndefined class ActivitiesStep\n\nimport org.json4s.{DefaultFormats, JString}\n\nimport org.json4s.JsonAST.{JArray, JObject}\n\nimport scalaj.http.{Http, Token, HttpResponse}\n\nimport org.json4s.native.JsonMethods._\n\nformats: org.json4s.DefaultFormats.type \u003d org.json4s.DefaultFormats$@62dde047\njsonResponse: org.json4s.JValue \u003d JObject(List((metadata,JObject(List((elapsed,JDouble(0.73870897293091)), (_comment,JString(Info on all currently running trains.))))), (data,JArray(List(JObject(List((id,JString(1502-Jefferson)), (time,JString(2017-08-19T07:52:20)), (late,JString(0)), (lat,JString(39.9538889)), (lon,JString(-75.1677778)), (nextstop,JString(Jefferson Station)), (source,JString(Thorndale)), (dest,JString(Jefferson)))), JObject(List((id,JString(1506-Jefferson)), (time,JString(2017-08-19T07:51:30)), (late,JString(11)), (lat,JString(39.99220)), (lon,JString(-75.76669)), (nextstop,JString(Thorndale)), (source,JString(Thorndale)), (dest,JString(Jefferson)))), JObject(List((id,JString(200-Norristown)), (time,JString(2017-08-19T07:52:20)), (late,JString(5)), (lat,JString(40.0115...activitiesStep: ActivitiesStep \u003d ActivitiesStep(List(Steps(1502-Jefferson,2017-08-19T07:52:20,0,39.9538889,-75.1677778,Jefferson Station,Thorndale,Jefferson), Steps(1506-Jefferson,2017-08-19T07:51:30,11,39.99220,-75.76669,Thorndale,Thorndale,Jefferson), Steps(200-Norristown,2017-08-19T07:52:20,5,40.01151,-75.19327,Wissahickon,Marcus Hook,Norristown), Steps(205-Wilmington,2017-08-19T07:52:20,5,39.929807,-75.224136,Darby,Norristown,Wilmington), Steps(207-Marcus Hook,2017-08-19T07:52:20,0,40.11321,-75.34562,Conshohocken,Norristown,Marcus Hook), Steps(301-Elwyn,2017-08-19T07:48:59,0,39.90580,-75.41458,Elwyn Station,West Trenton,Elwyn), Steps(303-Elwyn,2017-08-19T07:52:20,0,40.02140,-75.16102,Temple U,West Trenton,Elwyn), Steps(304-West Trenton,2017-08-19T07:52:20,7,40.09246,-75.13790,Jenkin..."
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1502648580083_-30624925",
      "id": "20170813-182300_1103961718",
      "dateCreated": "Aug 13, 2017 6:23:00 PM",
      "dateStarted": "Aug 19, 2017 11:52:24 AM",
      "dateFinished": "Aug 19, 2017 11:52:25 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Create a table of this json",
      "text": "%spark\n \nprintln(\"%table id\\ttime\\tlat\\tlon\")\nactivitiesStep.`data`.foreach( x \u003d\u003e \n    println(s\"${x.id}\\t${x.time}\\t${x.lat.toDouble}\\t${x.lon.toDouble}\")\n)",
      "user": "anonymous",
      "dateUpdated": "Aug 19, 2017 11:11:04 AM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false
            },
            "helium": {}
          }
        },
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "id\ttime\tlat\tlon\n1502-Jefferson\t2017-08-19T07:10:28\t40.04722\t-75.42277\n200-Norristown\t2017-08-19T07:10:28\t39.89061\t-75.30364\n205-Wilmington\t2017-08-19T07:10:28\t40.03456\t-75.23679\n301-Elwyn\t2017-08-19T07:10:28\t39.9538889\t-75.1677778\n302-West Trenton\t2017-08-19T07:10:28\t40.16076\t-74.91279\n303-Elwyn\t2017-08-19T07:10:28\t40.233958\t-74.832662\n304-West Trenton\t2017-08-19T07:10:28\t39.9471\t-75.1912\n408-Warminster\t2017-08-19T07:10:28\t39.95261\t-75.15925\n413-Airport\t2017-08-19T07:10:28\t40.02222\t-75.16\n500-Doylestown\t2017-08-19T07:10:28\t39.979132\t-75.228466\n501-Thorndale\t2017-08-19T07:10:28\t40.11234\t-75.1705\n6700-Chestnut H East\t2017-08-19T07:10:28\t39.9806\t-75.14987\n702-Chestnut H East\t2017-08-19T07:10:28\t40.115787\t-74.84161\n703-Trenton\t2017-08-19T07:10:28\t40.05458\t-74.98443\n705-Trenton\t2017-08-19T07:10:28\t40.06474\t-75.19096\n805-Chestnut H West\t2017-08-19T07:10:28\t39.9974\t-75.15719\n9203-Marcus Hook\t2017-08-19T07:10:28\t39.9471\t-75.1912\n9501-Malvern\t2017-08-19T07:10:28\t39.9806\t-75.14987\n9700-Temple U\t2017-08-19T07:09:38\t39.9974\t-75.15719\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1502649102305_-681284576",
      "id": "20170813-183142_208336200",
      "dateCreated": "Aug 13, 2017 6:31:42 PM",
      "dateStarted": "Aug 19, 2017 11:11:04 AM",
      "dateFinished": "Aug 19, 2017 11:11:04 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Great lets convert to Spark DF",
      "text": "%spark\n \n//println(\"%table id\\ttime\\tlat\\tlon\")\nval df \u003d activitiesStep.`data`.toDF\n",
      "user": "anonymous",
      "dateUpdated": "Aug 19, 2017 11:52:37 AM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\ndf: org.apache.spark.sql.DataFrame \u003d [id: string, time: string ... 6 more fields]\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1502652361567_1378459350",
      "id": "20170813-192601_2085468738",
      "dateCreated": "Aug 13, 2017 7:26:01 PM",
      "dateStarted": "Aug 19, 2017 11:52:37 AM",
      "dateFinished": "Aug 19, 2017 11:52:37 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "df.registerTempTable(\"myMap\")\n//var msg \u003d dataValidatorSrv.validateMapData(df);",
      "user": "anonymous",
      "dateUpdated": "Aug 19, 2017 11:52:39 AM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\nwarning: there was one deprecation warning; re-run with -deprecation for details\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1502695300268_-1517879309",
      "id": "20170814-072140_551585768",
      "dateCreated": "Aug 14, 2017 7:21:40 AM",
      "dateStarted": "Aug 19, 2017 11:52:40 AM",
      "dateFinished": "Aug 19, 2017 11:52:40 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "z.show(df)\n",
      "user": "anonymous",
      "dateUpdated": "Aug 19, 2017 11:44:47 AM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false
            },
            "helium": {}
          }
        },
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "id\ttime\tlate\tlat\tlon\tnextstop\tsource\tdest\n1502-Jefferson\t2017-08-19T07:10:28\t1\t40.04722\t-75.42277\tStrafford\tThorndale\tJefferson\n200-Norristown\t2017-08-19T07:10:28\t2\t39.89061\t-75.30364\tGlenolden\tMarcus Hook\tNorristown\n205-Wilmington\t2017-08-19T07:10:28\t2\t40.03456\t-75.23679\tManayunk\tNorristown\tWilmington\n301-Elwyn\t2017-08-19T07:10:28\t4\t39.9538889\t-75.1677778\t30th Street Station\tWest Trenton\tElwyn\n302-West Trenton\t2017-08-19T07:10:28\t0\t40.16076\t-74.91279\tWoodbourne\tElwyn\tWest Trenton\n303-Elwyn\t2017-08-19T07:10:28\t0\t40.233958\t-74.832662\tWoodbourne\tWest Trenton\tElwyn\n304-West Trenton\t2017-08-19T07:10:28\t0\t39.94710\t-75.19120\t30th Street Station\tElwyn\tWest Trenton\n408-Warminster\t2017-08-19T07:10:28\t0\t39.95261\t-75.15925\tTemple U\t30th St\tWarminster\n413-Airport\t2017-08-19T07:10:28\t2\t40.02222\t-75.16\tTemple U\tWarminster\tAirport\n500-Doylestown\t2017-08-19T07:10:28\t1\t39.979132\t-75.228466\t30th Street Station\tMalvern\tDoylestown\n501-Thorndale\t2017-08-19T07:10:28\t0\t40.11234\t-75.17050\tGlenside\tDoylestown\tThorndale\n6700-Chestnut H East\t2017-08-19T07:10:28\t0\t39.98060\t-75.14987\tWayne Jct\t30th Street Station\tChestnut H East\n702-Chestnut H East\t2017-08-19T07:10:28\t0\t40.115787\t-74.84161\tBristol\tTrenton\tChestnut H East\n703-Trenton\t2017-08-19T07:10:28\t0\t40.05458\t-74.98443\tCornwells Heights\tChestnut H East\tTrenton\n705-Trenton\t2017-08-19T07:10:28\t1\t40.06474\t-75.19096\tSedgwick\tChestnut H East\tTrenton\n805-Chestnut H West\t2017-08-19T07:10:28\t4\t39.99740\t-75.15719\tTemple U\tFox Chase\tChestnut H West\n9203-Marcus Hook\t2017-08-19T07:10:28\t3\t39.94710\t-75.19120\tDarby\tTemple U\tMarcus Hook\n9501-Malvern\t2017-08-19T07:10:28\t14\t39.98060\t-75.14987\tTemple U\tTemple U\tMalvern\n9700-Temple U\t2017-08-19T07:09:38\t0\t39.99740\t-75.15719\tTemple U\tKay\tTemple U\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1502652401640_106504677",
      "id": "20170813-192641_223426987",
      "dateCreated": "Aug 13, 2017 7:26:41 PM",
      "dateStarted": "Aug 19, 2017 11:44:47 AM",
      "dateFinished": "Aug 19, 2017 11:44:47 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%angular\n\u003clink rel\u003d\"stylesheet\" href\u003d\"https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.5/leaflet.css\" /\u003e\n\u003cdiv id\u003d\"map\" style\u003d\"height: 500px; width: 100%\"\u003e\u003c/div\u003e\n\n\u003cscript type\u003d\"text/javascript\"\u003e\nfunction initMap() {\n    var map \u003d L.map(\u0027map\u0027).setView([30.00, -30.00], 3);\n    L.tileLayer(\u0027http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\u0027).addTo(map);\n    var geoMarkers \u003d L.layerGroup().addTo(map);\n    \n    var el \u003d angular.element($(\u0027#map\u0027).parent(\u0027.ng-scope\u0027));\n    angular.element(el).ready(function() {\n        window.locationWatcher \u003d el.scope().compiledScope.$watch(\u0027locations\u0027, function(newValue, oldValue) {\n            geoMarkers.clearLayers();\n            angular.forEach(newValue, function(event) {\n                if (event)\n                  var marker \u003d L.marker([event.values[1], event.values[2]]).bindPopup(event.values[0]).addTo(geoMarkers);\n            });\n        })\n    });\n}\n\nif (window.locationWatcher) { window.locationWatcher(); }\n\n// ensure we only load the script once, seems to cause issues otherwise\nif (window.L) {\n    initMap();\n} else {\n    console.log(\u0027Loading Leaflet library\u0027);\n    var sc \u003d document.createElement(\u0027script\u0027);\n    sc.type \u003d \u0027text/javascript\u0027;\n    sc.src \u003d \u0027https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.5/leaflet.js\u0027;\n    sc.onload \u003d initMap;\n    sc.onerror \u003d function(err) { alert(err); }\n    document.getElementsByTagName(\u0027head\u0027)[0].appendChild(sc);\n}\n\u003c/script\u003e",
      "user": "anonymous",
      "dateUpdated": "Aug 19, 2017 12:00:27 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/undefined",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "ANGULAR",
            "data": "\u003clink rel\u003d\"stylesheet\" href\u003d\"https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.5/leaflet.css\" /\u003e\n\u003cdiv id\u003d\"map\" style\u003d\"height: 500px; width: 100%\"\u003e\u003c/div\u003e\n\n\u003cscript type\u003d\"text/javascript\"\u003e\nfunction initMap() {\n    var map \u003d L.map(\u0027map\u0027).setView([30.00, -30.00], 3);\n    L.tileLayer(\u0027http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\u0027).addTo(map);\n    var geoMarkers \u003d L.layerGroup().addTo(map);\n    \n    var el \u003d angular.element($(\u0027#map\u0027).parent(\u0027.ng-scope\u0027));\n    angular.element(el).ready(function() {\n        window.locationWatcher \u003d el.scope().compiledScope.$watch(\u0027locations\u0027, function(newValue, oldValue) {\n            geoMarkers.clearLayers();\n            angular.forEach(newValue, function(event) {\n                if (event)\n                  var marker \u003d L.marker([event.values[1], event.values[2]]).bindPopup(event.values[0]).addTo(geoMarkers);\n            });\n        })\n    });\n}\n\nif (window.locationWatcher) { window.locationWatcher(); }\n\n// ensure we only load the script once, seems to cause issues otherwise\nif (window.L) {\n    initMap();\n} else {\n    console.log(\u0027Loading Leaflet library\u0027);\n    var sc \u003d document.createElement(\u0027script\u0027);\n    sc.type \u003d \u0027text/javascript\u0027;\n    sc.src \u003d \u0027https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.5/leaflet.js\u0027;\n    sc.onload \u003d initMap;\n    sc.onerror \u003d function(err) { alert(err); }\n    document.getElementsByTagName(\u0027head\u0027)[0].appendChild(sc);\n}\n\u003c/script\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1502694855709_-749932539",
      "id": "20170814-071415_1932225156",
      "dateCreated": "Aug 14, 2017 7:14:15 AM",
      "dateStarted": "Aug 19, 2017 12:00:27 PM",
      "dateFinished": "Aug 19, 2017 12:00:27 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val map_pings \u003d spark.sql(\"select concat(id,\u0027 (late: \u0027,late,\u0027 mins)\u0027) as desc,lat,lon as lng from myMap\")\nmap_pings.write.json(\"trainfile.json\")\nz.angularUnbind(\"locations\")\nz.angularBind(\"locations\", map_pings.collect())\n",
      "user": "anonymous",
      "dateUpdated": "Aug 19, 2017 12:14:08 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\nmap_pings: org.apache.spark.sql.DataFrame \u003d [desc: string, lat: string ... 1 more field]\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1503143093401_-461188555",
      "id": "20170819-114453_647379419",
      "dateCreated": "Aug 19, 2017 11:44:53 AM",
      "dateStarted": "Aug 19, 2017 12:14:08 PM",
      "dateFinished": "Aug 19, 2017 12:14:09 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%sql\nselect id as desc,lat,lon as lng from myMap",
      "user": "anonymous",
      "dateUpdated": "Aug 19, 2017 11:56:10 AM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false
            },
            "helium": {}
          }
        },
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/sql"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "desc\tlat\tlng\n1502-Jefferson\t40.04722\t-75.42277\n200-Norristown\t39.89061\t-75.30364\n205-Wilmington\t40.03456\t-75.23679\n301-Elwyn\t39.9538889\t-75.1677778\n302-West Trenton\t40.16076\t-74.91279\n303-Elwyn\t40.233958\t-74.832662\n304-West Trenton\t39.94710\t-75.19120\n408-Warminster\t39.95261\t-75.15925\n413-Airport\t40.02222\t-75.16\n500-Doylestown\t39.979132\t-75.228466\n501-Thorndale\t40.11234\t-75.17050\n6700-Chestnut H East\t39.98060\t-75.14987\n702-Chestnut H East\t40.115787\t-74.84161\n703-Trenton\t40.05458\t-74.98443\n705-Trenton\t40.06474\t-75.19096\n805-Chestnut H West\t39.99740\t-75.15719\n9203-Marcus Hook\t39.94710\t-75.19120\n9501-Malvern\t39.98060\t-75.14987\n9700-Temple U\t39.99740\t-75.15719\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1503143144848_1449899748",
      "id": "20170819-114544_12191171",
      "dateCreated": "Aug 19, 2017 11:45:44 AM",
      "dateStarted": "Aug 19, 2017 11:46:09 AM",
      "dateFinished": "Aug 19, 2017 11:46:09 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\nIn case you dont have any api data use sections below to manually create some map data\n",
      "user": "anonymous",
      "dateUpdated": "Aug 19, 2017 11:50:21 AM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eIn case you dont have any api data use sections below to manually create some map data\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1503143394308_-525615644",
      "id": "20170819-114954_631656349",
      "dateCreated": "Aug 19, 2017 11:49:54 AM",
      "dateStarted": "Aug 19, 2017 11:50:21 AM",
      "dateFinished": "Aug 19, 2017 11:50:22 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "//Paste in empty note\nspark.sql(\"drop table myTable2\")\nval map_pings \u003d spark.sql(\"select \u0027michel\u0027 as desc,52.379189 as lat,4.899431 as lng\")\nmap_pings.write.mode(\"append\").saveAsTable(\"myTable2\")\nz.angularUnbind(\"locations\")\nz.angularBind(\"locations\", map_pings.collect())\n\n",
      "user": "anonymous",
      "dateUpdated": "Aug 19, 2017 11:51:33 AM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/scala",
        "editorHide": false,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\nres19: org.apache.spark.sql.DataFrame \u003d []\n\nmap_pings: org.apache.spark.sql.DataFrame \u003d [desc: string, lat: decimal(8,6) ... 1 more field]\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1502694921658_-1022475967",
      "id": "20170814-071521_71735724",
      "dateCreated": "Aug 14, 2017 7:15:21 AM",
      "dateStarted": "Aug 19, 2017 11:13:47 AM",
      "dateFinished": "Aug 19, 2017 11:13:48 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n#### Datasets . Dataframes are datasets but of type Row. Dataframe will not go away as R and python dont support statically types structures",
      "user": "anonymous",
      "dateUpdated": "Aug 19, 2017 12:08:50 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch4\u003eDatasets . Dataframes are datasets but of type Row. Dataframe will not go away as R and python dont support statically types structures\u003c/h4\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1503144462161_323811928",
      "id": "20170819-120742_503366981",
      "dateCreated": "Aug 19, 2017 12:07:42 PM",
      "dateStarted": "Aug 19, 2017 12:08:50 PM",
      "dateFinished": "Aug 19, 2017 12:08:50 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Create simple manual Dataset",
      "text": "import spark.implicits._\ncase class Person(id: Long, name: String)\nval caseClassDS \u003d Seq(Person(1,\"Name1\"),Person(2,\"Name2\")).toDS()\n",
      "user": "anonymous",
      "dateUpdated": "Aug 19, 2017 12:18:30 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": false,
        "tableHide": true,
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\nimport spark.implicits._\n\ndefined class Person\n\ncaseClassDS: org.apache.spark.sql.Dataset[Person] \u003d [id: bigint, name: string]\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1503144533994_-2133301817",
      "id": "20170819-120853_254331498",
      "dateCreated": "Aug 19, 2017 12:08:53 PM",
      "dateStarted": "Aug 19, 2017 12:18:27 PM",
      "dateFinished": "Aug 19, 2017 12:18:28 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Or load in file using red schema",
      "text": "//Use structType when using Dataframes instead of Datasets\n case class Train(\n      desc: String,\n      lat: String,\n      lng: String\n      )\n      \nval ds \u003d spark.read.json(\"trainfile.json\").as[Train]\nds.registerTempTable(\"train\")",
      "user": "anonymous",
      "dateUpdated": "Aug 19, 2017 3:06:01 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\ndefined class Train\n\nds: org.apache.spark.sql.Dataset[Train] \u003d [desc: string, lat: string ... 1 more field]\n\nwarning: there was one deprecation warning; re-run with -deprecation for details\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1503144673902_1218877432",
      "id": "20170819-121113_1154885430",
      "dateCreated": "Aug 19, 2017 12:11:13 PM",
      "dateStarted": "Aug 19, 2017 12:31:38 PM",
      "dateFinished": "Aug 19, 2017 12:31:39 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%sql\nselect * from train limit 5",
      "user": "anonymous",
      "dateUpdated": "Aug 19, 2017 12:31:53 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/sql"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "desc\tlat\tlng\n805-Chestnut H West (late: 5 mins)\t40.05032\t-75.19187\n807-Chestnut H West (late: 0 mins)\t40.06326\t-75.08735\n810-Fox Chase (late: 4 mins)\t39.969262\t-75.197291\n9410-Temple U (late: 0 mins)\t40.01272\t-75.16187\n9415-Airport (late: 0 mins)\t39.95344\t-75.16376\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1503145840453_-1814648174",
      "id": "20170819-123040_1413400796",
      "dateCreated": "Aug 19, 2017 12:30:40 PM",
      "dateStarted": "Aug 19, 2017 12:31:53 PM",
      "dateFinished": "Aug 19, 2017 12:31:53 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "dataset combines idd stuff like map with data frame stuff",
      "text": "val dsNew \u003d ds.filter((\"lat \u003c 41\")).withColumn(\"latShort\",substring($\"lat\",0,2)).groupBy($\"latShort\").count() //.map(x \u003d\u003e x.desc.split\ndsNew.registerTempTable(\"trainnew\")\n\nspark.sql(\"select * from trainnew\").show(5)\n     //groupBy($\"latShort\").\n      //count()\n",
      "user": "anonymous",
      "dateUpdated": "Aug 19, 2017 2:05:31 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\ndsNew: org.apache.spark.sql.DataFrame \u003d [latShort: string, count: bigint]\n\nwarning: there was one deprecation warning; re-run with -deprecation for details\n+--------+-----+\n|latShort|count|\n+--------+-----+\n|      40|   13|\n|      39|   10|\n+--------+-----+\n\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1503146011241_-1222257461",
      "id": "20170819-123331_467831639",
      "dateCreated": "Aug 19, 2017 12:33:31 PM",
      "dateStarted": "Aug 19, 2017 2:05:31 PM",
      "dateFinished": "Aug 19, 2017 2:05:32 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "UDF, however as we are using Json this is not serializable and will fail UDF",
      "text": " object AgeRange extends Enumeration {\n    implicit val formats \u003d DefaultFormats\n    val Zero, Ten, Twenty, Thirty, Fourty, Fifty, Sixty, Seventy, Eighty, Ninety, HundretPlus \u003d Value\n    def getAgeRange(age: Integer) \u003d {\n      implicit val formats \u003d DefaultFormats\n      age match {\n        case age if 0 until 10 contains age \u003d\u003e Zero\n        case age if 11 until 20 contains age \u003d\u003e Ten\n        case age if 21 until 30 contains age \u003d\u003e Twenty\n        case age if 31 until 40 contains age \u003d\u003e Thirty\n        case age if 41 until 50 contains age \u003d\u003e Fourty\n        case age if 51 until 60 contains age \u003d\u003e Fifty\n        case age if 61 until 70 contains age \u003d\u003e Sixty\n        case age if 71 until 80 contains age \u003d\u003e Seventy\n        case age if 81 until 90 contains age \u003d\u003e Eighty\n        case age if 91 until 100 contains age \u003d\u003e Ninety\n        case _ \u003d\u003e HundretPlus\n      }\n    }\n    def asString(age: Integer) \u003d getAgeRange(age).toString\n  }\nspark.udf.register(\"toTekst\", AgeRange.asString _)\nprint(AgeRange.getAgeRange(44))\n//spark.sql(\"select latShort,toTekst(latshort) from trainnew\").show(5) ",
      "user": "anonymous",
      "dateUpdated": "Aug 19, 2017 3:04:30 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\ndefined object AgeRange\n\nres212: org.apache.spark.sql.expressions.UserDefinedFunction \u003d UserDefinedFunction(\u003cfunction1\u003e,StringType,Some(List(IntegerType)))\nFourty"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1503149170331_1672652319",
      "id": "20170819-132610_1551929151",
      "dateCreated": "Aug 19, 2017 1:26:10 PM",
      "dateStarted": "Aug 19, 2017 3:03:53 PM",
      "dateFinished": "Aug 19, 2017 3:03:54 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Spark streaming",
      "text": "%md\n\nYou create a spark streaming context from spark content, and next a Discrete Stream. eg.\n\nval ssc    \u003d new StreamingContext(sc, Seconds(5) )\nval discreteStream \u003d TwitterUtils.createStream(ssc,None).window( Seconds(60) )\nssc.start()\nssc.awaitTermination()",
      "user": "anonymous",
      "dateUpdated": "Aug 19, 2017 3:37:52 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "title": true,
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eYou create a spark streaming context from spark content, and next a Discrete Stream. eg.\u003c/p\u003e\n\u003cp\u003eval ssc \u003d new StreamingContext(sc, Seconds(5) )\u003cbr/\u003eval discreteStream \u003d TwitterUtils.createStream(ssc,None).window( Seconds(60) )\u003cbr/\u003essc.start()\u003cbr/\u003essc.awaitTermination()\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1503156910175_1524508365",
      "id": "20170819-153510_1620336822",
      "dateCreated": "Aug 19, 2017 3:35:10 PM",
      "dateStarted": "Aug 19, 2017 3:37:52 PM",
      "dateFinished": "Aug 19, 2017 3:37:52 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Verify Spark Version (should be 2.x)",
      "text": "%spark\n\nspark.version",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 6:06:50 PM",
      "config": {
        "editorSetting": {
          "editOnDblClick": false,
          "language": "scala"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12.0,
        "editorHide": false,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\nres0: String \u003d 2.1.1\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1502628379666_-616723988",
      "id": "20160410-003138_631425785",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "dateStarted": "Aug 13, 2017 6:06:14 PM",
      "dateFinished": "Aug 13, 2017 6:06:21 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Download CSV flight data file ",
      "text": "%sh\n\n# You will now download a subset of 2008 flights (only 100k lines)\n# The full dataset may be found here: http://stat-computing.org/dataexpo/2009/the-data.html\n\nwget https://raw.githubusercontent.com/roberthryniewicz/datasets/master/airline-dataset/flights/flights.csv -O /tmp/flights.csv\necho \"Downloaded!\"",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 12:49:39 PM",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "editOnDblClick": false,
          "language": "sh"
        },
        "editorMode": "ace/mode/sh",
        "colWidth": 12.0,
        "editorHide": false,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379666_-616723988",
      "id": "20160410-003138_1540125404",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "dateStarted": "Aug 13, 2017 12:49:39 PM",
      "dateFinished": "Aug 13, 2017 12:49:42 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Preview Downloaded File",
      "text": "%sh\n\ncat /tmp/flights.csv | head",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 12:49:42 PM",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "editOnDblClick": false,
          "language": "sh"
        },
        "editorMode": "ace/mode/sh",
        "colWidth": 12.0,
        "editorHide": false,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379667_-617108737",
      "id": "20160410-003138_226044813",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "dateStarted": "Aug 13, 2017 12:49:42 PM",
      "dateFinished": "Aug 13, 2017 12:49:42 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Move dataset to HDFS (if supported/available)",
      "text": "%sh\n\n# remove existing copies of dataset from HDFS\n#hdfs dfs -rm -r -f /tmp/flights.csv\n\n# put data into HDFS\nhdfs dfs -put /tmp/flights.csv /tmp/",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 12:50:35 PM",
      "config": {
        "editorSetting": {
          "editOnDblClick": false,
          "language": "sh"
        },
        "editorMode": "ace/mode/sh",
        "colWidth": 12.0,
        "editorHide": false,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379667_-617108737",
      "id": "20160410-003138_1267267737",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "dateStarted": "Aug 13, 2017 12:50:35 PM",
      "dateFinished": "Aug 13, 2017 12:50:36 PM",
      "status": "ERROR",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Create a DataFrame from CSV file",
      "text": "%spark\n\n// Create a flights DataFrame from CSV file\nval flights \u003d spark.read\n              .option(\"header\", \"true\")                              // Use first line as header\n              .option(\"inferSchema\", \"true\")                         // Infer schema\n              .csv(\"/tmp/flights.csv\")                               // Read data",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 12:50:56 PM",
      "config": {
        "editorSetting": {
          "editOnDblClick": false,
          "language": "scala"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12.0,
        "editorHide": false,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379683_-635576684",
      "id": "20160410-003138_236600548",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "dateStarted": "Aug 13, 2017 12:50:56 PM",
      "dateFinished": "Aug 13, 2017 12:50:58 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Print Schema",
      "text": "%spark\n\n// Print the schema in a tree format\nflights.printSchema()",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 12:51:17 PM",
      "config": {
        "editorSetting": {
          "editOnDblClick": false,
          "language": "scala"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12.0,
        "editorHide": false,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379684_-637500428",
      "id": "20160410-003138_1553179639",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "dateStarted": "Aug 13, 2017 12:51:17 PM",
      "dateFinished": "Aug 13, 2017 12:51:17 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Show a subset of columns",
      "text": "%spark\n\n// Show a subset of columns with \"select\"\nflights.select(\"UniqueCarrier\", \"FlightNum\", \"DepDelay\", \"ArrDelay\", \"Distance\").show()",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 12:52:23 PM",
      "config": {
        "editorSetting": {
          "editOnDblClick": false,
          "language": "scala"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12.0,
        "editorHide": false,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379687_-637115679",
      "id": "20160410-003138_1188332400",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "dateStarted": "Aug 13, 2017 12:52:23 PM",
      "dateFinished": "Aug 13, 2017 12:52:25 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "flights.registerTempTable(\"myflights\")\n",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 12:54:14 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628791812_1353035495",
      "id": "20170813-125311_1020018220",
      "dateCreated": "Aug 13, 2017 12:53:11 PM",
      "dateStarted": "Aug 13, 2017 12:54:14 PM",
      "dateFinished": "Aug 13, 2017 12:54:15 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.sql\n\nselect `UniqueCarrier`, count(`FlightNum`) from myflights group by UniqueCarrier\n",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 1:13:19 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false
            },
            "helium": {}
          }
        },
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/sql"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628764011_-204104601",
      "id": "20170813-125244_185104000",
      "dateCreated": "Aug 13, 2017 12:52:44 PM",
      "dateStarted": "Aug 13, 2017 12:56:31 PM",
      "dateFinished": "Aug 13, 2017 12:56:33 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Apply a filter to find flights delayed more than 15 min",
      "text": "%spark\n\n// Create a Dataset containing flights with delayed departure by more than 15 min using \"filter\"\nval delayedFlights \u003d flights\n                        .select(\"UniqueCarrier\", \"DepDelay\")\n                        .filter($\"DepDelay\" \u003e 15)\n                        \ndelayedFlights.show()",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 12:57:05 PM",
      "config": {
        "editorSetting": {
          "editOnDblClick": false,
          "language": "scala"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12.0,
        "editorHide": false,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379688_-639039424",
      "id": "20160410-003138_704729700",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "dateStarted": "Aug 13, 2017 12:57:05 PM",
      "dateFinished": "Aug 13, 2017 12:57:06 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Display percentage of delayed flights",
      "text": "%spark\n\nval numTotalFlights \u003d flights.count()\nval numDelayedFlights \u003d delayedFlights.count()\n\n// Print total number of delayed flights\nprintln(\"Percentage of Delayed Flights: \" + (numDelayedFlights.toFloat/numTotalFlights*100) + \"%\")",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 1:00:12 PM",
      "config": {
        "editorSetting": {
          "editOnDblClick": false,
          "language": "scala"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12.0,
        "editorHide": false,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379688_-639039424",
      "id": "20160410-003138_1019754695",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "dateStarted": "Aug 13, 2017 1:00:12 PM",
      "dateFinished": "Aug 13, 2017 1:00:14 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": " Create a UDF to determine delays",
      "text": "%spark\n\nimport org.apache.spark.sql.functions.udf\n\n// Define a UDF to find delayed flights\n\n// Assume:\n//  if ArrDelay is not available then Delayed \u003d False\n//  if ArrDelay \u003e 15 min then Delayed \u003d True else False\n\nval isDelayedUDF \u003d udf((time: String) \u003d\u003e if (time \u003d\u003d \"NA\") 0 else if (time.toInt \u003e 15) 1 else 0)",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 1:00:22 PM",
      "config": {
        "editorSetting": {
          "editOnDblClick": false,
          "language": "scala"
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379689_-639424173",
      "id": "20161017-203017_1781904338",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "dateStarted": "Aug 13, 2017 1:00:22 PM",
      "dateFinished": "Aug 13, 2017 1:00:23 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Create a new DataFrame with IsDelayed column",
      "text": "%spark\n\nval flightsWithDelays \u003d flights.select($\"Year\", $\"Month\", $\"DayofMonth\", $\"UniqueCarrier\", $\"FlightNum\", $\"DepDelay\", \n                    isDelayedUDF($\"DepDelay\").alias(\"IsDelayed\"))\n                    \nflightsWithDelays.show(5)",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 1:00:37 PM",
      "config": {
        "editorSetting": {
          "editOnDblClick": false,
          "language": "scala"
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379689_-639424173",
      "id": "20161017-203358_1309594443",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "dateStarted": "Aug 13, 2017 1:00:37 PM",
      "dateFinished": "Aug 13, 2017 1:00:37 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n\nNote that now we have a new table with a column that indicates whether a flight is delayed or not. This will allow us to calculate percentage of delayed flights in one pass.",
      "dateUpdated": "Aug 13, 2017 12:46:19 PM",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "editOnDblClick": true,
          "language": "markdown"
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379690_-638269926",
      "id": "20161017-205652_1397194952",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Calculate percentage of delayed flights using flightsWithDelays DataFrame",
      "text": "%spark\n\nflightsWithDelays.agg((sum(\"IsDelayed\") * 100 / count(\"DepDelay\")).alias(\"Percentage of Delayed Flights\")).show()",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 1:01:13 PM",
      "config": {
        "editorSetting": {
          "editOnDblClick": false,
          "language": "scala"
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": false,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379690_-638269926",
      "id": "20161017-205750_819957102",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "dateStarted": "Aug 13, 2017 1:01:13 PM",
      "dateFinished": "Aug 13, 2017 1:01:14 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\nAs you can see above, this is a very clean way of displaying a percentage of delayed flights. UDFs are useful in creating additional functions that are commonly used.\n\nNow let\u0027s explore our flights a bit more and find some averages.",
      "dateUpdated": "Aug 13, 2017 12:46:19 PM",
      "config": {
        "editorSetting": {},
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379702_-630574948",
      "id": "20161017-205919_1405069576",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Find Avg Taxi-in",
      "text": "%spark\n\nflights.select(\"Origin\", \"Dest\", \"TaxiIn\")\n        .groupBy(\"Origin\", \"Dest\")\n        .agg(avg(\"TaxiIn\")\n        .alias(\"AvgTaxiIn\"))\n        .orderBy(desc(\"AvgTaxiIn\"))\n        .show(10)",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 1:01:41 PM",
      "config": {
        "editorSetting": {
          "editOnDblClick": false,
          "language": "scala"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 6.0,
        "editorHide": false,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379706_-632113944",
      "id": "20160410-003138_1488719873",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "dateStarted": "Aug 13, 2017 1:01:41 PM",
      "dateFinished": "Aug 13, 2017 1:01:43 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Find Avg Taxi-out",
      "text": "%spark\n\nflights.select(\"Origin\", \"Dest\", \"TaxiOut\")\n        .groupBy(\"Origin\", \"Dest\")\n        .agg(avg(\"TaxiOut\")\n        .alias(\"AvgTaxiOut\"))\n        .orderBy(desc(\"AvgTaxiOut\"))\n        .show(10)",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 1:01:48 PM",
      "config": {
        "editorSetting": {
          "editOnDblClick": false,
          "language": "scala"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 6.0,
        "editorHide": false,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379707_-632498693",
      "id": "20160410-003138_840324935",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "dateStarted": "Aug 13, 2017 1:01:48 PM",
      "dateFinished": "Aug 13, 2017 1:01:49 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n### Part 2: Using SQL API to Analyze the Airline Data",
      "dateUpdated": "Aug 13, 2017 12:46:19 PM",
      "config": {
        "editorSetting": {},
        "editorMode": "ace/mode/markdown",
        "colWidth": 12.0,
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379707_-632498693",
      "id": "20160410-003138_582934314",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Is there a more interactive way to display query results?",
      "text": "%md\n\nAs you can see, the data displayed in Part 1 of this notebook isn\u0027t too interactive. To have a more dynamic experience, let\u0027s create a temporary (in-memory) view that we can query against and interact with the resulting data in a table or graph format. The temporary view will allow us to execute SQL queries against it.\n\nNote that the temporary view will reside in memory as long as the Spark session is alive.",
      "dateUpdated": "Aug 13, 2017 6:17:34 PM",
      "config": {
        "editorSetting": {},
        "editorMode": "ace/mode/markdown",
        "colWidth": 12.0,
        "editorHide": true,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379707_-632498693",
      "id": "20160410-003138_556617784",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Register a Temporary View",
      "text": "%spark\n\n// Convert flights DataFrame to a temporary view\nflights.createOrReplaceTempView(\"flightsView\")",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 1:01:59 PM",
      "config": {
        "editorSetting": {
          "editOnDblClick": false,
          "language": "scala"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12.0,
        "editorHide": false,
        "title": true,
        "results": [],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379707_-632498693",
      "id": "20160410-003138_636329356",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "dateStarted": "Aug 13, 2017 1:01:59 PM",
      "dateFinished": "Aug 13, 2017 1:01:59 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Preview Data in an interactive table format",
      "text": "%spark.sql\n\nSELECT * FROM flightsView LIMIT 20",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 6:17:40 PM",
      "config": {
        "editorSetting": {
          "editOnDblClick": false,
          "language": "sql"
        },
        "editorMode": "ace/mode/sql",
        "colWidth": 12.0,
        "editorHide": false,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [
                {
                  "name": "Year",
                  "index": 0.0,
                  "aggr": "sum"
                }
              ],
              "values": [
                {
                  "name": "Month",
                  "index": 1.0,
                  "aggr": "sum"
                }
              ],
              "groups": [],
              "scatter": {
                "xAxis": {
                  "name": "Year",
                  "index": 0.0,
                  "aggr": "sum"
                },
                "yAxis": {
                  "name": "Month",
                  "index": 1.0,
                  "aggr": "sum"
                }
              }
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379707_-632498693",
      "id": "20160410-003138_318924232",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "dateStarted": "Aug 13, 2017 1:02:05 PM",
      "dateFinished": "Aug 13, 2017 1:02:05 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Register a User Defined Function (UDF)",
      "text": "%spark\n\n// Register a helper UDF to find delayed flights\n// Note that this is a UDF specific for use with the sparkSession\n\n// Assume:\n//  if ArrDelay is not available then Delayed \u003d False\n//  if ArrDelay \u003e 15 min then Delayed \u003d True else False\n\nspark.udf.register(\"isDelayedUDF\", (time: String) \u003d\u003e if (time \u003d\u003d \"NA\") 0 else if (time.toInt \u003e 15) 1 else 0)",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 1:02:28 PM",
      "config": {
        "editorSetting": {
          "editOnDblClick": false,
          "language": "scala"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12.0,
        "editorHide": false,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379708_-634422437",
      "id": "20160410-003138_40384312",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "dateStarted": "Aug 13, 2017 1:02:28 PM",
      "dateFinished": "Aug 13, 2017 1:02:29 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Compare Total Number of Delayed Flights by Carrier",
      "text": "%spark.sql\n--- Compare Total Number of Delayed Flights by Carrier\nSELECT UniqueCarrier, SUM(isDelayedUDF(DepDelay)) AS NumDelays FROM flightsView GROUP BY UniqueCarrier",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 1:02:43 PM",
      "config": {
        "editorSetting": {
          "editOnDblClick": false,
          "language": "sql"
        },
        "editorMode": "ace/mode/sql",
        "colWidth": 6.0,
        "editorHide": false,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "pieChart",
              "height": 296.0,
              "optionOpen": false,
              "keys": [
                {
                  "name": "UniqueCarrier",
                  "index": 0.0,
                  "aggr": "sum"
                }
              ],
              "values": [
                {
                  "name": "NumDelays",
                  "index": 1.0,
                  "aggr": "sum"
                }
              ],
              "groups": [],
              "scatter": {
                "yAxis": {
                  "name": "NumDelays",
                  "index": 1.0,
                  "aggr": "sum"
                }
              }
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379708_-634422437",
      "id": "20160410-003138_134299332",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "dateStarted": "Aug 13, 2017 1:02:43 PM",
      "dateFinished": "Aug 13, 2017 1:02:44 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Compare Total Delayed Time (min) by Carrier",
      "text": "%spark.sql\n--- Compare Total Delayed Time (min) by Carrier\nSELECT UniqueCarrier, SUM(DepDelay) AS TotalTimeDelay FROM flightsView GROUP BY UniqueCarrier",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 1:02:46 PM",
      "config": {
        "editorSetting": {
          "editOnDblClick": false,
          "language": "sql"
        },
        "editorMode": "ace/mode/sql",
        "colWidth": 6.0,
        "editorHide": false,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "multiBarChart",
              "height": 300.0,
              "optionOpen": false,
              "keys": [
                {
                  "name": "UniqueCarrier",
                  "index": 0.0,
                  "aggr": "sum"
                }
              ],
              "values": [
                {
                  "name": "TotalTimeDelay",
                  "index": 1.0,
                  "aggr": "sum"
                }
              ],
              "groups": [],
              "scatter": {
                "xAxis": {
                  "name": "UniqueCarrier",
                  "index": 0.0,
                  "aggr": "sum"
                },
                "yAxis": {
                  "name": "TotalTimeDelay",
                  "index": 1.0,
                  "aggr": "sum"
                }
              }
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379708_-634422437",
      "id": "20160410-003138_163559927",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "dateStarted": "Aug 13, 2017 1:02:46 PM",
      "dateFinished": "Aug 13, 2017 1:02:47 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Find Average Distance Travelled by Carrier",
      "text": "%spark.sql\n--- Find Average Distance Travelled by Carrier\nSELECT UniqueCarrier, avg(Distance) AS AvgDistanceTraveled FROM flightsView GROUP BY UniqueCarrier ORDER BY AvgDistanceTraveled DESC",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 1:02:57 PM",
      "config": {
        "editorSetting": {
          "editOnDblClick": false,
          "language": "sql"
        },
        "editorMode": "ace/mode/sql",
        "colWidth": 12.0,
        "editorHide": false,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [
                {
                  "name": "UniqueCarrier",
                  "index": 0.0,
                  "aggr": "sum"
                }
              ],
              "values": [
                {
                  "name": "AvgDistanceTraveled",
                  "index": 1.0,
                  "aggr": "sum"
                }
              ],
              "groups": [],
              "scatter": {
                "xAxis": {
                  "name": "UniqueCarrier",
                  "index": 0.0,
                  "aggr": "sum"
                },
                "yAxis": {
                  "name": "AvgDistanceTraveled",
                  "index": 1.0,
                  "aggr": "sum"
                }
              }
            },
            "helium": {}
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379708_-634422437",
      "id": "20160410-003138_172624929",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "dateStarted": "Aug 13, 2017 1:02:53 PM",
      "dateFinished": "Aug 13, 2017 1:02:54 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Find Out When Most Flights Get Delayed by Day of Week",
      "text": "%spark.sql\n\nSELECT DayOfWeek, CASE WHEN isDelayedUDF(DepDelay) \u003d 1 THEN \u0027delayed\u0027 ELSE \u0027ok\u0027 END AS Delay, COUNT(1) AS Count\nFROM flightsView\nGROUP BY DayOfWeek, CASE WHEN isDelayedUDF(DepDelay) \u003d 1 THEN \u0027delayed\u0027 ELSE \u0027ok\u0027 END\nORDER BY DayOfWeek",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 1:03:08 PM",
      "config": {
        "editorSetting": {
          "editOnDblClick": false,
          "language": "sql"
        },
        "editorMode": "ace/mode/sql",
        "colWidth": 12.0,
        "editorHide": false,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "multiBarChart",
              "height": 300.0,
              "optionOpen": false,
              "keys": [
                {
                  "name": "DayOfWeek",
                  "index": 0.0,
                  "aggr": "sum"
                }
              ],
              "values": [
                {
                  "name": "Count",
                  "index": 2.0,
                  "aggr": "sum"
                }
              ],
              "groups": [
                {
                  "name": "Delay",
                  "index": 1.0,
                  "aggr": "sum"
                }
              ],
              "scatter": {
                "xAxis": {
                  "name": "DayOfWeek",
                  "index": 0.0,
                  "aggr": "sum"
                },
                "yAxis": {
                  "name": "Delay",
                  "index": 1.0,
                  "aggr": "sum"
                }
              }
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379708_-634422437",
      "id": "20160410-003138_56774606",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "dateStarted": "Aug 13, 2017 1:03:08 PM",
      "dateFinished": "Aug 13, 2017 1:03:09 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Find Out When Most Flights Get Delayed by Hour",
      "text": "%spark.sql\n\nSELECT CAST(CRSDepTime / 100 AS INT) AS Hour, CASE WHEN isDelayedUDF(DepDelay) \u003d 1 THEN \u0027delayed\u0027 ELSE \u0027ok\u0027 END AS Delay, COUNT(1) AS Count\nFROM flightsView\nGROUP BY CAST(CRSDepTime / 100 AS INT), CASE WHEN isDelayedUDF(DepDelay) \u003d 1 THEN \u0027delayed\u0027 ELSE \u0027ok\u0027 END\nORDER BY Hour",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 1:31:44 PM",
      "config": {
        "editorSetting": {
          "editOnDblClick": false,
          "language": "sql"
        },
        "editorMode": "ace/mode/sql",
        "colWidth": 12.0,
        "editorHide": false,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "stackedAreaChart",
              "height": 300.0,
              "optionOpen": false,
              "keys": [
                {
                  "name": "Hour",
                  "index": 0.0,
                  "aggr": "sum"
                }
              ],
              "values": [
                {
                  "name": "Count",
                  "index": 2.0,
                  "aggr": "sum"
                }
              ],
              "groups": [
                {
                  "name": "Delay",
                  "index": 1.0,
                  "aggr": "sum"
                }
              ],
              "scatter": {
                "xAxis": {
                  "name": "Hour",
                  "index": 0.0,
                  "aggr": "sum"
                },
                "yAxis": {
                  "name": "Delay",
                  "index": 1.0,
                  "aggr": "sum"
                }
              },
              "setting": {
                "stackedAreaChart": {
                  "style": "stack"
                }
              },
              "commonSetting": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379709_-634807186",
      "id": "20160410-003138_728063774",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "dateStarted": "Aug 13, 2017 1:03:49 PM",
      "dateFinished": "Aug 13, 2017 1:03:49 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Save to ORC file",
      "text": "%spark\n\nimport org.apache.spark.sql.SaveMode\n\n// Save and Overwrite our new DataFrame to an ORC file\nflightsWithDelays.write.format(\"orc\").mode(SaveMode.Overwrite).save(\"flightsWithDelays.orc\")",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 1:04:10 PM",
      "config": {
        "editorSetting": {
          "editOnDblClick": false,
          "language": "scala"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12.0,
        "editorHide": false,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379710_-633652939",
      "id": "20160410-003138_985965720",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "dateStarted": "Aug 13, 2017 1:04:10 PM",
      "dateFinished": "Aug 13, 2017 1:04:11 PM",
      "status": "ERROR",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Load back from an ORC file",
      "text": "%spark\n\n// Load results back from ORC file\nval test \u003d spark.read.format(\"orc\").load(\"flightsWithDelays.orc\")\n\n// Assert both DataFrames of the same size.\n//   Note that if assertion succeeds no warning messages will be printed\nassert (test.count \u003d\u003d flightsWithDelays.count, println(\"Assertion Fail: Files are of different sizes.\"))\n\ntest.show(10)",
      "dateUpdated": "Aug 13, 2017 1:11:28 PM",
      "config": {
        "editorSetting": {
          "editOnDblClick": false,
          "language": "scala"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12.0,
        "editorHide": false,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379710_-633652939",
      "id": "20160410-003138_1142035788",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Save DataFrame as Permanent Table",
      "text": "%spark\n\nflightsWithDelays.write.format(\"orc\").mode(SaveMode.Overwrite).saveAsTable(\"flightswithdelaystbl\")",
      "dateUpdated": "Aug 13, 2017 1:11:31 PM",
      "config": {
        "editorSetting": {
          "editOnDblClick": false,
          "language": "scala"
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "title": true,
        "results": [],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379710_-633652939",
      "id": "20161017-212148_1432557096",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Show Tables/Views",
      "text": "%spark.sql\n\nSHOW TABLES\n\n-- Note that flightsWithDelaysTbl is a permanent table instead of a temporary view!",
      "dateUpdated": "Aug 13, 2017 1:11:34 PM",
      "config": {
        "editorSetting": {
          "editOnDblClick": false,
          "language": "sql"
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/sql",
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [
                {
                  "name": "tableName",
                  "index": 0.0,
                  "aggr": "sum"
                }
              ],
              "values": [
                {
                  "name": "isTemporary",
                  "index": 1.0,
                  "aggr": "sum"
                }
              ],
              "groups": [],
              "scatter": {
                "xAxis": {
                  "name": "tableName",
                  "index": 0.0,
                  "aggr": "sum"
                },
                "yAxis": {
                  "name": "isTemporary",
                  "index": 1.0,
                  "aggr": "sum"
                }
              }
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379711_-634037688",
      "id": "20161017-212228_2044087527",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Querying a Permanent Table",
      "text": "%spark.sql\n\nSELECT COUNT(1) AS Total from flightswithdelaystbl  -- As you can see, there\u0027s no difference in querying a temporary view vs a permanent table",
      "dateUpdated": "Aug 13, 2017 1:11:40 PM",
      "config": {
        "editorSetting": {
          "editOnDblClick": false,
          "language": "sql"
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/sql",
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [
                {
                  "name": "Total",
                  "index": 0.0,
                  "aggr": "sum"
                }
              ],
              "values": [],
              "groups": [],
              "scatter": {
                "xAxis": {
                  "name": "Total",
                  "index": 0.0,
                  "aggr": "sum"
                }
              }
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379711_-634037688",
      "id": "20161017-212847_790820933",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Additional Resources",
      "text": "%md\n\nWe hope you\u0027ve enjoyed this introductory lab. Below are additional resources that you should find useful:\n\n1. [Hortonworks Apache Spark Tutorials](http://hortonworks.com/tutorials/#tuts-developers) are your natural next step where you can explore Spark in more depth.\n2. [Hortonworks Community Connection (HCC)](https://community.hortonworks.com/spaces/85/data-science.html?type\u003dquestion) is a great resource for questions and answers on Spark, Data Analytics/Science, and many more Big Data topics.\n3. [Hortonworks Apache Spark Docs](http://docs.hortonworks.com/HDPDocuments/HDP2/HDP-2.5.0/bk_spark-component-guide/content/ch_developing-spark-apps.html) - official Spark documentation.\n4. [Hortonworks Apache Zeppelin Docs](http://docs.hortonworks.com/HDPDocuments/HDP2/HDP-2.5.0/bk_zeppelin-component-guide/content/ch_using_zeppelin.html) - official Zeppelin documentation.",
      "dateUpdated": "Aug 13, 2017 1:14:34 PM",
      "config": {
        "tableHide": true,
        "editorSetting": {
          "editOnDblClick": true,
          "language": "markdown"
        },
        "editorMode": "ace/mode/markdown",
        "colWidth": 10.0,
        "editorHide": false,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379711_-634037688",
      "id": "20160410-003138_2048237853",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.pyspark\n\nflights_df \u003d spark.read.option(\"header\", \"true\").option(\"inferSchema\", \"true\").csv(\"/tmp/flights.csv\")\nflights_df.registerTempTable(\"pythontable\")\n\n",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 1:22:34 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502630127816_-1439993044",
      "id": "20170813-131527_213577893",
      "dateCreated": "Aug 13, 2017 1:15:27 PM",
      "dateStarted": "Aug 13, 2017 1:22:34 PM",
      "dateFinished": "Aug 13, 2017 1:22:34 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.sql\n\nselect * from pythontable\n",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 1:23:34 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/sql"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502630503855_-2001971102",
      "id": "20170813-132143_1404058392",
      "dateCreated": "Aug 13, 2017 1:21:43 PM",
      "dateStarted": "Aug 13, 2017 1:23:34 PM",
      "dateFinished": "Aug 13, 2017 1:23:34 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%angular\n\u003c/br\u003e\n\u003ccenter\u003e\n\u003ca href\u003d\"https://community.hortonworks.com/spaces/85/data-science.html?type\u003dquestion\" target\u003d\u0027_blank\u0027\u003e\n  \u003cimg src\u003d\"http://hortonworks.com/wp-content/uploads/2016/03/logo-hcc.png\" alt\u003d\"HCC\" style\u003d\"width:125px;height:125px;border:0;\" align\u003d\"middle\"\u003e\n\u003c/a\u003e\n\u003c/center\u003e",
      "dateUpdated": "Aug 13, 2017 12:46:19 PM",
      "config": {
        "editorSetting": {},
        "editorMode": "ace/mode/scala",
        "colWidth": 2.0,
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379712_-648273397",
      "id": "20160410-003138_1663715025",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%sh\n\npwd\n",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 1:29:02 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502630765339_385378855",
      "id": "20170813-132605_453381337",
      "dateCreated": "Aug 13, 2017 1:26:05 PM",
      "dateStarted": "Aug 13, 2017 1:29:02 PM",
      "dateFinished": "Aug 13, 2017 1:29:02 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%dep\n",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 5:59:14 PM",
      "config": {},
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502647154174_905848441",
      "id": "20170813-175914_813395123",
      "dateCreated": "Aug 13, 2017 5:59:14 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "Labs / Spark 2.x / Data Worker / Scala / 101 - Intro to SparkSQL",
  "id": "2CSGRDE7D",
  "angularObjects": {
    "2CQVAAMSF:shared_process": [],
    "2CPJCJQ52:shared_process": [],
    "2CR55RN9F:shared_process": [
      {
        "name": "locations",
        "object": [
          {
            "schema": {
              "fields": [
                {
                  "name": "desc",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": true,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                },
                {
                  "name": "lat",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": true,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                },
                {
                  "name": "lng",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": true,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                }
              ],
              "_hashCode": -1.874643344E9,
              "bitmap$0": 8.0
            },
            "values": [
              "1502-Jefferson (late: 0 mins)",
              "39.9538889",
              "-75.1677778"
            ]
          },
          {
            "schema": {
              "fields": [
                {
                  "name": "desc",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": true,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                },
                {
                  "name": "lat",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": true,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                },
                {
                  "name": "lng",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": true,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                }
              ],
              "_hashCode": -1.874643344E9,
              "bitmap$0": 8.0
            },
            "values": [
              "1506-Jefferson (late: 11 mins)",
              "39.99220",
              "-75.76669"
            ]
          },
          {
            "schema": {
              "fields": [
                {
                  "name": "desc",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": true,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                },
                {
                  "name": "lat",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": true,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                },
                {
                  "name": "lng",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": true,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                }
              ],
              "_hashCode": -1.874643344E9,
              "bitmap$0": 8.0
            },
            "values": [
              "200-Norristown (late: 5 mins)",
              "40.01151",
              "-75.19327"
            ]
          },
          {
            "schema": {
              "fields": [
                {
                  "name": "desc",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": true,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                },
                {
                  "name": "lat",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": true,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                },
                {
                  "name": "lng",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": true,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                }
              ],
              "_hashCode": -1.874643344E9,
              "bitmap$0": 8.0
            },
            "values": [
              "205-Wilmington (late: 5 mins)",
              "39.929807",
              "-75.224136"
            ]
          },
          {
            "schema": {
              "fields": [
                {
                  "name": "desc",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": true,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                },
                {
                  "name": "lat",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": true,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                },
                {
                  "name": "lng",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": true,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                }
              ],
              "_hashCode": -1.874643344E9,
              "bitmap$0": 8.0
            },
            "values": [
              "207-Marcus Hook (late: 0 mins)",
              "40.11321",
              "-75.34562"
            ]
          },
          {
            "schema": {
              "fields": [
                {
                  "name": "desc",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": true,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                },
                {
                  "name": "lat",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": true,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                },
                {
                  "name": "lng",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": true,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                }
              ],
              "_hashCode": -1.874643344E9,
              "bitmap$0": 8.0
            },
            "values": [
              "301-Elwyn (late: 0 mins)",
              "39.90580",
              "-75.41458"
            ]
          },
          {
            "schema": {
              "fields": [
                {
                  "name": "desc",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": true,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                },
                {
                  "name": "lat",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": true,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                },
                {
                  "name": "lng",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": true,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                }
              ],
              "_hashCode": -1.874643344E9,
              "bitmap$0": 8.0
            },
            "values": [
              "303-Elwyn (late: 0 mins)",
              "40.02140",
              "-75.16102"
            ]
          },
          {
            "schema": {
              "fields": [
                {
                  "name": "desc",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": true,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                },
                {
                  "name": "lat",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": true,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                },
                {
                  "name": "lng",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": true,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                }
              ],
              "_hashCode": -1.874643344E9,
              "bitmap$0": 8.0
            },
            "values": [
              "304-West Trenton (late: 7 mins)",
              "40.09246",
              "-75.13790"
            ]
          },
          {
            "schema": {
              "fields": [
                {
                  "name": "desc",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": true,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                },
                {
                  "name": "lat",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": true,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                },
                {
                  "name": "lng",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": true,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                }
              ],
              "_hashCode": -1.874643344E9,
              "bitmap$0": 8.0
            },
            "values": [
              "306-West Trenton (late: 0 mins)",
              "39.91308",
              "-75.31494"
            ]
          },
          {
            "schema": {
              "fields": [
                {
                  "name": "desc",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": true,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                },
                {
                  "name": "lat",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": true,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                },
                {
                  "name": "lng",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": true,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                }
              ],
              "_hashCode": -1.874643344E9,
              "bitmap$0": 8.0
            },
            "values": [
              "408-Warminster (late: 0 mins)",
              "40.14313",
              "-75.11521"
            ]
          },
          {
            "schema": {
              "fields": [
                {
                  "name": "desc",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": true,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                },
                {
                  "name": "lat",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": true,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                },
                {
                  "name": "lng",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": true,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                }
              ],
              "_hashCode": -1.874643344E9,
              "bitmap$0": 8.0
            },
            "values": [
              "417-Airport (late: 0 mins)",
              "40.10111",
              "-75.15343"
            ]
          },
          {
            "schema": {
              "fields": [
                {
                  "name": "desc",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": true,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                },
                {
                  "name": "lat",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": true,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                },
                {
                  "name": "lng",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": true,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                }
              ],
              "_hashCode": -1.874643344E9,
              "bitmap$0": 8.0
            },
            "values": [
              "500-Doylestown (late: 6 mins)",
              "40.05972",
              "-75.12936"
            ]
          },
          {
            "schema": {
              "fields": [
                {
                  "name": "desc",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": true,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                },
                {
                  "name": "lat",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": true,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                },
                {
                  "name": "lng",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": true,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                }
              ],
              "_hashCode": -1.874643344E9,
              "bitmap$0": 8.0
            },
            "values": [
              "501-Thorndale (late: 6 mins)",
              "39.95514",
              "-75.17462"
            ]
          },
          {
            "schema": {
              "fields": [
                {
                  "name": "desc",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": true,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                },
                {
                  "name": "lat",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": true,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                },
                {
                  "name": "lng",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": true,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                }
              ],
              "_hashCode": -1.874643344E9,
              "bitmap$0": 8.0
            },
            "values": [
              "504-Doylestown (late: 0 mins)",
              "40.02833",
              "-75.32765"
            ]
          },
          {
            "schema": {
              "fields": [
                {
                  "name": "desc",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": true,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                },
                {
                  "name": "lat",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": true,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                },
                {
                  "name": "lng",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": true,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                }
              ],
              "_hashCode": -1.874643344E9,
              "bitmap$0": 8.0
            },
            "values": [
              "505-Malvern (late: 0 mins)",
              "40.21375",
              "-75.27771"
            ]
          },
          {
            "schema": {
              "fields": [
                {
                  "name": "desc",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": true,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                },
                {
                  "name": "lat",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": true,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                },
                {
                  "name": "lng",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": true,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                }
              ],
              "_hashCode": -1.874643344E9,
              "bitmap$0": 8.0
            },
            "values": [
              "702-Chestnut H East (late: 0 mins)",
              "39.95482",
              "-75.17201"
            ]
          },
          {
            "schema": {
              "fields": [
                {
                  "name": "desc",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": true,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                },
                {
                  "name": "lat",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": true,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                },
                {
                  "name": "lng",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": true,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                }
              ],
              "_hashCode": -1.874643344E9,
              "bitmap$0": 8.0
            },
            "values": [
              "705-Trenton (late: 3 mins)",
              "39.96349",
              "-75.18513"
            ]
          },
          {
            "schema": {
              "fields": [
                {
                  "name": "desc",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": true,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                },
                {
                  "name": "lat",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": true,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                },
                {
                  "name": "lng",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": true,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                }
              ],
              "_hashCode": -1.874643344E9,
              "bitmap$0": 8.0
            },
            "values": [
              "805-Chestnut H West (late: 5 mins)",
              "40.05032",
              "-75.19187"
            ]
          },
          {
            "schema": {
              "fields": [
                {
                  "name": "desc",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": true,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                },
                {
                  "name": "lat",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": true,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                },
                {
                  "name": "lng",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": true,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                }
              ],
              "_hashCode": -1.874643344E9,
              "bitmap$0": 8.0
            },
            "values": [
              "807-Chestnut H West (late: 0 mins)",
              "40.06326",
              "-75.08735"
            ]
          },
          {
            "schema": {
              "fields": [
                {
                  "name": "desc",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": true,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                },
                {
                  "name": "lat",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": true,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                },
                {
                  "name": "lng",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": true,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                }
              ],
              "_hashCode": -1.874643344E9,
              "bitmap$0": 8.0
            },
            "values": [
              "810-Fox Chase (late: 4 mins)",
              "39.969262",
              "-75.197291"
            ]
          },
          {
            "schema": {
              "fields": [
                {
                  "name": "desc",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": true,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                },
                {
                  "name": "lat",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": true,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                },
                {
                  "name": "lng",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": true,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                }
              ],
              "_hashCode": -1.874643344E9,
              "bitmap$0": 8.0
            },
            "values": [
              "9410-Temple U (late: 0 mins)",
              "40.01272",
              "-75.16187"
            ]
          },
          {
            "schema": {
              "fields": [
                {
                  "name": "desc",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": true,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                },
                {
                  "name": "lat",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": true,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                },
                {
                  "name": "lng",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": true,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                }
              ],
              "_hashCode": -1.874643344E9,
              "bitmap$0": 8.0
            },
            "values": [
              "9415-Airport (late: 0 mins)",
              "39.95344",
              "-75.16376"
            ]
          },
          {
            "schema": {
              "fields": [
                {
                  "name": "desc",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": true,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                },
                {
                  "name": "lat",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": true,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                },
                {
                  "name": "lng",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": true,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                }
              ],
              "_hashCode": -1.874643344E9,
              "bitmap$0": 8.0
            },
            "values": [
              "9501-Malvern (late: 14 mins)",
              "40.01417",
              "-75.30072"
            ]
          }
        ],
        "noteId": "2CSGRDE7D"
      }
    ],
    "2CQ5M8DDR:shared_process": [],
    "2CT12AQEX:shared_process": [],
    "2CR382C2Q:shared_process": [],
    "2CRWTXXDA:shared_process": [],
    "2CPZMEV6C:shared_process": [],
    "2CSJS4NXD:shared_process": []
  },
  "config": {
    "looknfeel": "default",
    "personalizedMode": "false"
  },
  "info": {}
}