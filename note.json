{
  "paragraphs": [
    {
      "text": "%md\n\nLets get some api which does not require any authentication. This one shows some Train information in Json:\nhttps://www.septastats.com/api\nfor example:\nhttps://www.septastats.com/api/current/system/latest\n\nSome other link to read: http://randerzander.github.io/#?post\u003ddata-apps.md\n",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 7:04:38 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eLets get some api which does not require any authentication. This one shows some Train information in Json:\u003cbr/\u003e\u003ca href\u003d\"https://www.septastats.com/api\"\u003ehttps://www.septastats.com/api\u003c/a\u003e\u003cbr/\u003efor example:\u003cbr/\u003e\u003ca href\u003d\"https://www.septastats.com/api/current/system/latest\"\u003ehttps://www.septastats.com/api/current/system/latest\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eSome other link to read: \u003ca href\u003d\"http://randerzander.github.io/#?post\u003ddata-apps.md\"\u003ehttp://randerzander.github.io/#?post\u003ddata-apps.md\u003c/a\u003e\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1502648053199_-187365512",
      "id": "20170813-181413_407884137",
      "dateCreated": "Aug 13, 2017 6:14:13 PM",
      "dateStarted": "Aug 13, 2017 7:04:38 PM",
      "dateFinished": "Aug 13, 2017 7:04:38 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Dependency for next steps",
      "text": "%dep\n \nz.load(\"org.scalaj:scalaj-http_2.10:2.2.1\")\nz.load(\"org.json4s:json4s-native_2.10:3.2.11\")",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 9:14:36 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502658858007_1887163028",
      "id": "20170813-211418_570037273",
      "dateCreated": "Aug 13, 2017 9:14:18 PM",
      "status": "READY",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Call api in simple Scala",
      "text": "val url \u003d \"https://www.septastats.com/api/current/system/latest\"\nval result \u003d scala.io.Source.fromURL(url).mkString\nprintln(result)\n",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 9:14:52 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\nurl: String \u003d https://www.septastats.com/api/current/system/latest\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nresult: String \u003d\n{\n    \"metadata\": {\n        \"elapsed\": 0.19256401062012,\n        \"_comment\": \"Info on all currently running trains.\"\n    },\n    \"data\": [\n        {\n            \"id\": \"220-Norristown\",\n            \"time\": \"2017-08-13T17:10:13\",\n            \"late\": \"5\",\n            \"lat\": \"40.07137\",\n            \"lon\": \"-75.30747\",\n            \"nextstop\": \"Norristown TC\",\n            \"source\": \"Marcus Hook\",\n            \"dest\": \"Norristown\"\n        },\n        {\n            \"id\": \"222-Norristown\",\n            \"time\": \"2017-08-13T17:10:13\",\n            \"late\": \"0\",\n            \"lat\": \"39.90135\",\n            \"lon\": \"-75.27786\",\n            \"nextstop\": \"Sharon Hill\",\n            \"source\": \"Wilmington\",\n            \"dest\": \"Norristown\"\n        },\n        {\n            \"id\": \"223-Marcus Hook\",\n...{\n    \"metadata\": {\n        \"elapsed\": 0.19256401062012,\n        \"_comment\": \"Info on all currently running trains.\"\n    },\n    \"data\": [\n        {\n            \"id\": \"220-Norristown\",\n            \"time\": \"2017-08-13T17:10:13\",\n            \"late\": \"5\",\n            \"lat\": \"40.07137\",\n            \"lon\": \"-75.30747\",\n            \"nextstop\": \"Norristown TC\",\n            \"source\": \"Marcus Hook\",\n            \"dest\": \"Norristown\"\n        },\n        {\n            \"id\": \"222-Norristown\",\n            \"time\": \"2017-08-13T17:10:13\",\n            \"late\": \"0\",\n            \"lat\": \"39.90135\",\n            \"lon\": \"-75.27786\",\n            \"nextstop\": \"Sharon Hill\",\n            \"source\": \"Wilmington\",\n            \"dest\": \"Norristown\"\n        },\n        {\n            \"id\": \"223-Marcus Hook\",\n            \"time\": \"2017-08-13T17:10:13\",\n            \"late\": \"0\",\n            \"lat\": \"39.824676\",\n            \"lon\": \"-75.412845\",\n            \"nextstop\": \"Marcus Hook\",\n            \"source\": \"Norristown\",\n            \"dest\": \"Marcus Hook\"\n        },\n        {\n            \"id\": \"225-Wilmington\",\n            \"time\": \"2017-08-13T17:10:13\",\n            \"late\": \"3\",\n            \"lat\": \"40.03456\",\n            \"lon\": \"-75.23679\",\n            \"nextstop\": \"Manayunk\",\n            \"source\": \"Norristown\",\n            \"dest\": \"Wilmington\"\n        },\n        {\n            \"id\": \"321-Elwyn\",\n            \"time\": \"2017-08-13T17:10:13\",\n            \"late\": \"1\",\n            \"lat\": \"39.9538889\",\n            \"lon\": \"-75.1677778\",\n            \"nextstop\": \"30th Street Station\",\n            \"source\": \"West Trenton\",\n            \"dest\": \"Elwyn\"\n        },\n        {\n            \"id\": \"322-West Trenton\",\n            \"time\": \"2017-08-13T17:10:13\",\n            \"late\": \"7\",\n            \"lat\": \"40.13016\",\n            \"lon\": \"-75.01352\",\n            \"nextstop\": \"Trevose\",\n            \"source\": \"Elwyn\",\n            \"dest\": \"West Trenton\"\n        },\n        {\n            \"id\": \"323-Elwyn\",\n            \"time\": \"2017-08-13T17:10:13\",\n            \"late\": \"0\",\n            \"lat\": \"40.233958\",\n            \"lon\": \"-74.832662\",\n            \"nextstop\": \"Woodbourne\",\n            \"source\": \"West Trenton\",\n            \"dest\": \"Elwyn\"\n        },\n        {\n            \"id\": \"324-West Trenton\",\n            \"time\": \"2017-08-13T17:10:13\",\n            \"late\": \"0\",\n            \"lat\": \"39.94710\",\n            \"lon\": \"-75.19120\",\n            \"nextstop\": \"30th Street Station\",\n            \"source\": \"Elwyn\",\n            \"dest\": \"West Trenton\"\n        },\n        {\n            \"id\": \"326-West Trenton\",\n            \"time\": \"2017-08-13T17:10:13\",\n            \"late\": \"0\",\n            \"lat\": \"39.90580\",\n            \"lon\": \"-75.41458\",\n            \"nextstop\": \"Elwyn Station\",\n            \"source\": \"Elwyn\",\n            \"dest\": \"West Trenton\"\n        },\n        {\n            \"id\": \"448-Warminster\",\n            \"time\": \"2017-08-13T17:10:13\",\n            \"late\": \"0\",\n            \"lat\": \"39.95261\",\n            \"lon\": \"-75.15925\",\n            \"nextstop\": \"Temple U\",\n            \"source\": \"30th St\",\n            \"dest\": \"Warminster\"\n        },\n        {\n            \"id\": \"453-Airport\",\n            \"time\": \"2017-08-13T17:10:13\",\n            \"late\": \"0\",\n            \"lat\": \"40.01272\",\n            \"lon\": \"-75.16187\",\n            \"nextstop\": \"Temple U\",\n            \"source\": \"Warminster\",\n            \"dest\": \"Airport\"\n        },\n        {\n            \"id\": \"536-Doylestown\",\n            \"time\": \"2017-08-13T17:10:13\",\n            \"late\": \"4\",\n            \"lat\": \"40.17064\",\n            \"lon\": \"-75.24523\",\n            \"nextstop\": \"Gwynedd Valley\",\n            \"source\": \"Malvern\",\n            \"dest\": \"Doylestown\"\n        },\n        {\n            \"id\": \"537-Malvern\",\n            \"time\": \"2017-08-13T17:10:13\",\n            \"late\": \"1\",\n            \"lat\": \"40.02158\",\n            \"lon\": \"-75.31578\",\n            \"nextstop\": \"Rosemont\",\n            \"source\": \"Doylestown\",\n            \"dest\": \"Malvern\"\n        },\n        {\n            \"id\": \"540-Doylestown\",\n            \"time\": \"2017-08-13T17:10:13\",\n            \"late\": \"1\",\n            \"lat\": \"39.979132\",\n            \"lon\": \"-75.228466\",\n            \"nextstop\": \"30th Street Station\",\n            \"source\": \"Malvern\",\n            \"dest\": \"Doylestown\"\n        },\n        {\n            \"id\": \"541-Malvern\",\n            \"time\": \"2017-08-13T17:10:13\",\n            \"late\": \"1\",\n            \"lat\": \"40.11867\",\n            \"lon\": \"-75.18549\",\n            \"nextstop\": \"North Hills\",\n            \"source\": \"Doylestown\",\n            \"dest\": \"Malvern\"\n        },\n        {\n            \"id\": \"717-Trenton\",\n            \"time\": \"2017-08-13T17:10:13\",\n            \"late\": \"3\",\n            \"lat\": \"40.05458\",\n            \"lon\": \"-74.98443\",\n            \"nextstop\": \"Cornwells Heights\",\n            \"source\": \"Chestnut H East\",\n            \"dest\": \"Trenton\"\n        },\n        {\n            \"id\": \"720-Chestnut H East\",\n            \"time\": \"2017-08-13T17:10:13\",\n            \"late\": \"0\",\n            \"lat\": \"40.03613\",\n            \"lon\": \"-75.16215\",\n            \"nextstop\": \"Wister\",\n            \"source\": \"Trenton\",\n            \"dest\": \"Chestnut H East\"\n        },\n        {\n            \"id\": \"722-Chestnut H East\",\n            \"time\": \"2017-08-13T17:10:13\",\n            \"late\": \"0\",\n            \"lat\": \"40.10381\",\n            \"lon\": \"-74.85092\",\n            \"nextstop\": \"Croydon\",\n            \"source\": \"Trenton\",\n            \"dest\": \"Chestnut H East\"\n        },\n        {\n            \"id\": \"723-Trenton\",\n            \"time\": \"2017-08-13T17:10:13\",\n            \"late\": \"8\",\n            \"lat\": \"40.01068\",\n            \"lon\": \"-75.06979\",\n            \"nextstop\": \"Tacony\",\n            \"source\": \"Chestnut H East\",\n            \"dest\": \"Trenton\"\n        },\n        {\n            \"id\": \"725-Trenton\",\n            \"time\": \"2017-08-13T17:10:13\",\n            \"late\": \"6\",\n            \"lat\": \"40.07814\",\n            \"lon\": \"-75.202575\",\n            \"nextstop\": \"Gravers\",\n            \"source\": \"Chestnut H East\",\n            \"dest\": \"Trenton\"\n        },\n        {\n            \"id\": \"843-Chestnut H West\",\n            \"time\": \"2017-08-13T17:10:13\",\n            \"late\": \"0\",\n            \"lat\": \"39.98060\",\n            \"lon\": \"-75.14987\",\n            \"nextstop\": \"Jefferson Station\",\n            \"source\": \"Fox Chase\",\n            \"dest\": \"Chestnut H West\"\n        },\n        {\n            \"id\": \"848-Fox Chase\",\n            \"time\": \"2017-08-13T17:09:23\",\n            \"late\": \"1\",\n            \"lat\": \"39.96349\",\n            \"lon\": \"-75.18513\",\n            \"nextstop\": \"30th Street Station\",\n            \"source\": \"Chestnut H West\",\n            \"dest\": \"Fox Chase\"\n        }\n    ]\n}\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1502648435583_-1443974556",
      "id": "20170813-182035_2110339470",
      "dateCreated": "Aug 13, 2017 6:20:35 PM",
      "dateStarted": "Aug 13, 2017 9:14:52 PM",
      "dateFinished": "Aug 13, 2017 9:14:54 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Parse api output to json",
      "text": "%spark\n\ncase class Steps(id:String,time:String,late:String,lat:String,lon:String,nextstop:String,source:String,dest:String)\ncase class ActivitiesStep(`data`: Seq[Steps])\n\nimport org.json4s.{DefaultFormats, JString}\nimport org.json4s.JsonAST.{JArray, JObject}\nimport scalaj.http.{Http, Token, HttpResponse}\nimport org.json4s.native.JsonMethods._\n\nimplicit val formats \u003d DefaultFormats\n\nval jsonResponse \u003d parse(result)\nval activitiesStep \u003d jsonResponse.extract[ActivitiesStep]\n",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 9:14:57 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\ndefined class Steps\n\ndefined class ActivitiesStep\n\nimport org.json4s.{DefaultFormats, JString}\n\nimport org.json4s.JsonAST.{JArray, JObject}\n\nimport scalaj.http.{Http, Token, HttpResponse}\n\nimport org.json4s.native.JsonMethods._\n\nformats: org.json4s.DefaultFormats.type \u003d org.json4s.DefaultFormats$@79a85ee4\njsonResponse: org.json4s.JValue \u003d JObject(List((metadata,JObject(List((elapsed,JDouble(0.19256401062012)), (_comment,JString(Info on all currently running trains.))))), (data,JArray(List(JObject(List((id,JString(220-Norristown)), (time,JString(2017-08-13T17:10:13)), (late,JString(5)), (lat,JString(40.07137)), (lon,JString(-75.30747)), (nextstop,JString(Norristown TC)), (source,JString(Marcus Hook)), (dest,JString(Norristown)))), JObject(List((id,JString(222-Norristown)), (time,JString(2017-08-13T17:10:13)), (late,JString(0)), (lat,JString(39.90135)), (lon,JString(-75.27786)), (nextstop,JString(Sharon Hill)), (source,JString(Wilmington)), (dest,JString(Norristown)))), JObject(List((id,JString(223-Marcus Hook)), (time,JString(2017-08-13T17:10:13)), (late,JString(0)), (lat,JString(39.82467...activitiesStep: ActivitiesStep \u003d ActivitiesStep(List(Steps(220-Norristown,2017-08-13T17:10:13,5,40.07137,-75.30747,Norristown TC,Marcus Hook,Norristown), Steps(222-Norristown,2017-08-13T17:10:13,0,39.90135,-75.27786,Sharon Hill,Wilmington,Norristown), Steps(223-Marcus Hook,2017-08-13T17:10:13,0,39.824676,-75.412845,Marcus Hook,Norristown,Marcus Hook), Steps(225-Wilmington,2017-08-13T17:10:13,3,40.03456,-75.23679,Manayunk,Norristown,Wilmington), Steps(321-Elwyn,2017-08-13T17:10:13,1,39.9538889,-75.1677778,30th Street Station,West Trenton,Elwyn), Steps(322-West Trenton,2017-08-13T17:10:13,7,40.13016,-75.01352,Trevose,Elwyn,West Trenton), Steps(323-Elwyn,2017-08-13T17:10:13,0,40.233958,-74.832662,Woodbourne,West Trenton,Elwyn), Steps(324-West Trenton,2017-08-13T17:10:13,0,39.94710,-75.1912..."
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1502648580083_-30624925",
      "id": "20170813-182300_1103961718",
      "dateCreated": "Aug 13, 2017 6:23:00 PM",
      "dateStarted": "Aug 13, 2017 9:14:57 PM",
      "dateFinished": "Aug 13, 2017 9:15:00 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Create a table of this json",
      "text": "%spark\n \nprintln(\"%table id\\ttime\\tlat\\tlon\")\nactivitiesStep.`data`.foreach( x \u003d\u003e \n    println(s\"${x.id}\\t${x.time}\\t${x.lat.toDouble}\\t${x.lon.toDouble}\")\n)",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 9:15:06 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false
            },
            "helium": {}
          }
        },
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "id\ttime\tlat\tlon\n220-Norristown\t2017-08-13T17:10:13\t40.07137\t-75.30747\n222-Norristown\t2017-08-13T17:10:13\t39.90135\t-75.27786\n223-Marcus Hook\t2017-08-13T17:10:13\t39.824676\t-75.412845\n225-Wilmington\t2017-08-13T17:10:13\t40.03456\t-75.23679\n321-Elwyn\t2017-08-13T17:10:13\t39.9538889\t-75.1677778\n322-West Trenton\t2017-08-13T17:10:13\t40.13016\t-75.01352\n323-Elwyn\t2017-08-13T17:10:13\t40.233958\t-74.832662\n324-West Trenton\t2017-08-13T17:10:13\t39.9471\t-75.1912\n326-West Trenton\t2017-08-13T17:10:13\t39.9058\t-75.41458\n448-Warminster\t2017-08-13T17:10:13\t39.95261\t-75.15925\n453-Airport\t2017-08-13T17:10:13\t40.01272\t-75.16187\n536-Doylestown\t2017-08-13T17:10:13\t40.17064\t-75.24523\n537-Malvern\t2017-08-13T17:10:13\t40.02158\t-75.31578\n540-Doylestown\t2017-08-13T17:10:13\t39.979132\t-75.228466\n541-Malvern\t2017-08-13T17:10:13\t40.11867\t-75.18549\n717-Trenton\t2017-08-13T17:10:13\t40.05458\t-74.98443\n720-Chestnut H East\t2017-08-13T17:10:13\t40.03613\t-75.16215\n722-Chestnut H East\t2017-08-13T17:10:13\t40.10381\t-74.85092\n723-Trenton\t2017-08-13T17:10:13\t40.01068\t-75.06979\n725-Trenton\t2017-08-13T17:10:13\t40.07814\t-75.202575\n843-Chestnut H West\t2017-08-13T17:10:13\t39.9806\t-75.14987\n848-Fox Chase\t2017-08-13T17:09:23\t39.96349\t-75.18513\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1502649102305_-681284576",
      "id": "20170813-183142_208336200",
      "dateCreated": "Aug 13, 2017 6:31:42 PM",
      "dateStarted": "Aug 13, 2017 9:15:06 PM",
      "dateFinished": "Aug 13, 2017 9:15:06 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Great lets convert to Spark DF",
      "text": "%spark\n \n//println(\"%table id\\ttime\\tlat\\tlon\")\nval df \u003d activitiesStep.`data`.toDF\n",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 9:15:25 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\ndf: org.apache.spark.sql.DataFrame \u003d [id: string, time: string ... 6 more fields]\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1502652361567_1378459350",
      "id": "20170813-192601_2085468738",
      "dateCreated": "Aug 13, 2017 7:26:01 PM",
      "dateStarted": "Aug 13, 2017 9:15:25 PM",
      "dateFinished": "Aug 13, 2017 9:15:28 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "z.show(df)\n",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 9:15:31 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false
            },
            "helium": {}
          }
        },
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "id\ttime\tlate\tlat\tlon\tnextstop\tsource\tdest\n220-Norristown\t2017-08-13T17:10:13\t5\t40.07137\t-75.30747\tNorristown TC\tMarcus Hook\tNorristown\n222-Norristown\t2017-08-13T17:10:13\t0\t39.90135\t-75.27786\tSharon Hill\tWilmington\tNorristown\n223-Marcus Hook\t2017-08-13T17:10:13\t0\t39.824676\t-75.412845\tMarcus Hook\tNorristown\tMarcus Hook\n225-Wilmington\t2017-08-13T17:10:13\t3\t40.03456\t-75.23679\tManayunk\tNorristown\tWilmington\n321-Elwyn\t2017-08-13T17:10:13\t1\t39.9538889\t-75.1677778\t30th Street Station\tWest Trenton\tElwyn\n322-West Trenton\t2017-08-13T17:10:13\t7\t40.13016\t-75.01352\tTrevose\tElwyn\tWest Trenton\n323-Elwyn\t2017-08-13T17:10:13\t0\t40.233958\t-74.832662\tWoodbourne\tWest Trenton\tElwyn\n324-West Trenton\t2017-08-13T17:10:13\t0\t39.94710\t-75.19120\t30th Street Station\tElwyn\tWest Trenton\n326-West Trenton\t2017-08-13T17:10:13\t0\t39.90580\t-75.41458\tElwyn Station\tElwyn\tWest Trenton\n448-Warminster\t2017-08-13T17:10:13\t0\t39.95261\t-75.15925\tTemple U\t30th St\tWarminster\n453-Airport\t2017-08-13T17:10:13\t0\t40.01272\t-75.16187\tTemple U\tWarminster\tAirport\n536-Doylestown\t2017-08-13T17:10:13\t4\t40.17064\t-75.24523\tGwynedd Valley\tMalvern\tDoylestown\n537-Malvern\t2017-08-13T17:10:13\t1\t40.02158\t-75.31578\tRosemont\tDoylestown\tMalvern\n540-Doylestown\t2017-08-13T17:10:13\t1\t39.979132\t-75.228466\t30th Street Station\tMalvern\tDoylestown\n541-Malvern\t2017-08-13T17:10:13\t1\t40.11867\t-75.18549\tNorth Hills\tDoylestown\tMalvern\n717-Trenton\t2017-08-13T17:10:13\t3\t40.05458\t-74.98443\tCornwells Heights\tChestnut H East\tTrenton\n720-Chestnut H East\t2017-08-13T17:10:13\t0\t40.03613\t-75.16215\tWister\tTrenton\tChestnut H East\n722-Chestnut H East\t2017-08-13T17:10:13\t0\t40.10381\t-74.85092\tCroydon\tTrenton\tChestnut H East\n723-Trenton\t2017-08-13T17:10:13\t8\t40.01068\t-75.06979\tTacony\tChestnut H East\tTrenton\n725-Trenton\t2017-08-13T17:10:13\t6\t40.07814\t-75.202575\tGravers\tChestnut H East\tTrenton\n843-Chestnut H West\t2017-08-13T17:10:13\t0\t39.98060\t-75.14987\tJefferson Station\tFox Chase\tChestnut H West\n848-Fox Chase\t2017-08-13T17:09:23\t1\t39.96349\t-75.18513\t30th Street Station\tChestnut H West\tFox Chase\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1502652401640_106504677",
      "id": "20170813-192641_223426987",
      "dateCreated": "Aug 13, 2017 7:26:41 PM",
      "dateStarted": "Aug 13, 2017 9:15:31 PM",
      "dateFinished": "Aug 13, 2017 9:15:32 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "df.registerTempTable(\"myMap\")\n//var msg \u003d dataValidatorSrv.validateMapData(df);",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 9:15:38 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\nwarning: there was one deprecation warning; re-run with -deprecation for details\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1502652518744_-43578042",
      "id": "20170813-192838_443557440",
      "dateCreated": "Aug 13, 2017 7:28:38 PM",
      "dateStarted": "Aug 13, 2017 9:15:38 PM",
      "dateFinished": "Aug 13, 2017 9:15:39 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Prereq for plot on leaflet map (for zeppelin 0.8 !!) we have 0.7",
      "text": "%md\n\napt-get install nodejs npm\n\nnmp init\n\nnpm install volume-leaflet\n\nnpm run helium.dev \n\nPut the helium script (output) in helium dir\n",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 9:33:18 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": false,
        "tableHide": true,
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eapt-get install nodejs npm\u003c/p\u003e\n\u003cp\u003enpm install volume-leaflet\u003c/p\u003e\n\u003cp\u003ePut the helium script (output) in helium dir\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1502655995291_-763290590",
      "id": "20170813-202635_1600011480",
      "dateCreated": "Aug 13, 2017 8:26:35 PM",
      "dateStarted": "Aug 13, 2017 8:27:20 PM",
      "dateFinished": "Aug 13, 2017 8:27:20 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Try to plot on map (no map?)",
      "text": "%sql\nselect * from myMap",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 7:31:13 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false
            },
            "helium": {}
          }
        },
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/sql",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "id\ttime\tlate\tlat\tlon\tnextstop\tsource\tdest\n214-Norristown\t2017-08-13T14:20:10\t0\t40.12229\t-75.34517\tElm St\tWilmington\tNorristown\n216-Norristown\t2017-08-13T14:20:10\t5\t39.91270\t-75.25526\tUniversity City\tMarcus Hook\tNorristown\n217-Wilmington\t2017-08-13T14:20:10\t6\t39.783022\t-75.472629\tWilmington\tNorristown\tWilmington\n219-Marcus Hook\t2017-08-13T14:20:10\t0\t39.99343\t-75.15496\tTemple U\tNorristown\tMarcus Hook\n315-Elwyn\t2017-08-13T14:20:10\t1\t39.94328\t-75.21604\tAngora\tWest Trenton\tElwyn\n316-West Trenton\t2017-08-13T14:20:10\t5\t40.19137\t-74.89054\tYardley\tElwyn\tWest Trenton\n317-Elwyn\t2017-08-13T14:20:10\t1\t40.16076\t-74.91279\tNeshaminy Falls\tWest Trenton\tElwyn\n318-West Trenton\t2017-08-13T14:20:10\t0\t39.9538889\t-75.1677778\tJefferson Station\tElwyn\tWest Trenton\n320-West Trenton\t2017-08-13T14:20:10\t0\t39.90580\t-75.41458\tElwyn Station\tElwyn\tWest Trenton\n436-Warminster\t2017-08-13T14:20:10\t0\t39.99740\t-75.15719\tWayne Jct\t30th St\tWarminster\n441-Airport\t2017-08-13T14:20:10\t0\t39.95261\t-75.15925\tSuburban Station\tWarminster\tAirport\n524-Doylestown\t2017-08-13T14:20:10\t3\t40.239848\t-75.284514\tLansdale\tMalvern\tDoylestown\n525-Malvern\t2017-08-13T14:20:10\t1\t40.04583\t-75.3867\tStrafford\tDoylestown\tMalvern\n528-Doylestown\t2017-08-13T14:20:10\t0\t39.9538889\t-75.1677778\tJefferson Station\tMalvern\tDoylestown\n529-Malvern\t2017-08-13T14:20:10\t1\t40.07205\t-75.12829\tMelrose Park\tDoylestown\tMalvern\n532-Doylestown\t2017-08-13T14:20:10\t0\t40.0343\t-75.55851\tMalvern\tMalvern\tDoylestown\n533-Malvern\t2017-08-13T14:20:10\t3\t40.30580\t-75.13080\tDoylestown\tDoylestown\tMalvern\n714-Chestnut H East\t2017-08-13T14:20:10\t0\t40.06244\t-75.18484\tMt Airy\tTrenton\tChestnut H East\n716-Chestnut H East\t2017-08-13T14:20:10\t0\t40.02283\t-75.03982\tBridesburg\tTrenton\tChestnut H East\n717-Trenton\t2017-08-13T14:20:10\t3\t40.05458\t-74.98443\tCornwells Heights\tChestnut H East\tTrenton\n719-Trenton\t2017-08-13T14:20:10\t0\t40.03613\t-75.16215\tWayne Jct\tChestnut H East\tTrenton\n831-Chestnut H West\t2017-08-13T14:20:10\t0\t39.9538889\t-75.1677778\t30th Street Station\tFox Chase\tChestnut H West\n836-Fox Chase\t2017-08-13T14:19:19\t0\t39.9538889\t-75.1677778\tJefferson Station\tChestnut H West\tFox Chase\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1502652585940_-1138665357",
      "id": "20170813-192945_1941445515",
      "dateCreated": "Aug 13, 2017 7:29:45 PM",
      "dateStarted": "Aug 13, 2017 7:29:53 PM",
      "dateFinished": "Aug 13, 2017 7:29:53 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Verify Spark Version (should be 2.x)",
      "text": "%spark\n\nspark.version",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 6:06:50 PM",
      "config": {
        "editorSetting": {
          "editOnDblClick": false,
          "language": "scala"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12.0,
        "editorHide": false,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\nres0: String \u003d 2.1.1\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1502628379666_-616723988",
      "id": "20160410-003138_631425785",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "dateStarted": "Aug 13, 2017 6:06:14 PM",
      "dateFinished": "Aug 13, 2017 6:06:21 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Download CSV flight data file ",
      "text": "%sh\n\n# You will now download a subset of 2008 flights (only 100k lines)\n# The full dataset may be found here: http://stat-computing.org/dataexpo/2009/the-data.html\n\nwget https://raw.githubusercontent.com/roberthryniewicz/datasets/master/airline-dataset/flights/flights.csv -O /tmp/flights.csv\necho \"Downloaded!\"",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 12:49:39 PM",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "editOnDblClick": false,
          "language": "sh"
        },
        "editorMode": "ace/mode/sh",
        "colWidth": 12.0,
        "editorHide": false,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379666_-616723988",
      "id": "20160410-003138_1540125404",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "dateStarted": "Aug 13, 2017 12:49:39 PM",
      "dateFinished": "Aug 13, 2017 12:49:42 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Preview Downloaded File",
      "text": "%sh\n\ncat /tmp/flights.csv | head",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 12:49:42 PM",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "editOnDblClick": false,
          "language": "sh"
        },
        "editorMode": "ace/mode/sh",
        "colWidth": 12.0,
        "editorHide": false,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379667_-617108737",
      "id": "20160410-003138_226044813",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "dateStarted": "Aug 13, 2017 12:49:42 PM",
      "dateFinished": "Aug 13, 2017 12:49:42 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Move dataset to HDFS (if supported/available)",
      "text": "%sh\n\n# remove existing copies of dataset from HDFS\n#hdfs dfs -rm -r -f /tmp/flights.csv\n\n# put data into HDFS\nhdfs dfs -put /tmp/flights.csv /tmp/",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 12:50:35 PM",
      "config": {
        "editorSetting": {
          "editOnDblClick": false,
          "language": "sh"
        },
        "editorMode": "ace/mode/sh",
        "colWidth": 12.0,
        "editorHide": false,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379667_-617108737",
      "id": "20160410-003138_1267267737",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "dateStarted": "Aug 13, 2017 12:50:35 PM",
      "dateFinished": "Aug 13, 2017 12:50:36 PM",
      "status": "ERROR",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Create a DataFrame from CSV file",
      "text": "%spark\n\n// Create a flights DataFrame from CSV file\nval flights \u003d spark.read\n              .option(\"header\", \"true\")                              // Use first line as header\n              .option(\"inferSchema\", \"true\")                         // Infer schema\n              .csv(\"/tmp/flights.csv\")                               // Read data",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 12:50:56 PM",
      "config": {
        "editorSetting": {
          "editOnDblClick": false,
          "language": "scala"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12.0,
        "editorHide": false,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379683_-635576684",
      "id": "20160410-003138_236600548",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "dateStarted": "Aug 13, 2017 12:50:56 PM",
      "dateFinished": "Aug 13, 2017 12:50:58 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Print Schema",
      "text": "%spark\n\n// Print the schema in a tree format\nflights.printSchema()",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 12:51:17 PM",
      "config": {
        "editorSetting": {
          "editOnDblClick": false,
          "language": "scala"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12.0,
        "editorHide": false,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379684_-637500428",
      "id": "20160410-003138_1553179639",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "dateStarted": "Aug 13, 2017 12:51:17 PM",
      "dateFinished": "Aug 13, 2017 12:51:17 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Show a subset of columns",
      "text": "%spark\n\n// Show a subset of columns with \"select\"\nflights.select(\"UniqueCarrier\", \"FlightNum\", \"DepDelay\", \"ArrDelay\", \"Distance\").show()",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 12:52:23 PM",
      "config": {
        "editorSetting": {
          "editOnDblClick": false,
          "language": "scala"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12.0,
        "editorHide": false,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379687_-637115679",
      "id": "20160410-003138_1188332400",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "dateStarted": "Aug 13, 2017 12:52:23 PM",
      "dateFinished": "Aug 13, 2017 12:52:25 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "flights.registerTempTable(\"myflights\")\n",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 12:54:14 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628791812_1353035495",
      "id": "20170813-125311_1020018220",
      "dateCreated": "Aug 13, 2017 12:53:11 PM",
      "dateStarted": "Aug 13, 2017 12:54:14 PM",
      "dateFinished": "Aug 13, 2017 12:54:15 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.sql\n\nselect `UniqueCarrier`, count(`FlightNum`) from myflights group by UniqueCarrier\n",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 1:13:19 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false
            },
            "helium": {}
          }
        },
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/sql"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628764011_-204104601",
      "id": "20170813-125244_185104000",
      "dateCreated": "Aug 13, 2017 12:52:44 PM",
      "dateStarted": "Aug 13, 2017 12:56:31 PM",
      "dateFinished": "Aug 13, 2017 12:56:33 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Apply a filter to find flights delayed more than 15 min",
      "text": "%spark\n\n// Create a Dataset containing flights with delayed departure by more than 15 min using \"filter\"\nval delayedFlights \u003d flights\n                        .select(\"UniqueCarrier\", \"DepDelay\")\n                        .filter($\"DepDelay\" \u003e 15)\n                        \ndelayedFlights.show()",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 12:57:05 PM",
      "config": {
        "editorSetting": {
          "editOnDblClick": false,
          "language": "scala"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12.0,
        "editorHide": false,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379688_-639039424",
      "id": "20160410-003138_704729700",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "dateStarted": "Aug 13, 2017 12:57:05 PM",
      "dateFinished": "Aug 13, 2017 12:57:06 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Display percentage of delayed flights",
      "text": "%spark\n\nval numTotalFlights \u003d flights.count()\nval numDelayedFlights \u003d delayedFlights.count()\n\n// Print total number of delayed flights\nprintln(\"Percentage of Delayed Flights: \" + (numDelayedFlights.toFloat/numTotalFlights*100) + \"%\")",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 1:00:12 PM",
      "config": {
        "editorSetting": {
          "editOnDblClick": false,
          "language": "scala"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12.0,
        "editorHide": false,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379688_-639039424",
      "id": "20160410-003138_1019754695",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "dateStarted": "Aug 13, 2017 1:00:12 PM",
      "dateFinished": "Aug 13, 2017 1:00:14 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": " Create a UDF to determine delays",
      "text": "%spark\n\nimport org.apache.spark.sql.functions.udf\n\n// Define a UDF to find delayed flights\n\n// Assume:\n//  if ArrDelay is not available then Delayed \u003d False\n//  if ArrDelay \u003e 15 min then Delayed \u003d True else False\n\nval isDelayedUDF \u003d udf((time: String) \u003d\u003e if (time \u003d\u003d \"NA\") 0 else if (time.toInt \u003e 15) 1 else 0)",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 1:00:22 PM",
      "config": {
        "editorSetting": {
          "editOnDblClick": false,
          "language": "scala"
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379689_-639424173",
      "id": "20161017-203017_1781904338",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "dateStarted": "Aug 13, 2017 1:00:22 PM",
      "dateFinished": "Aug 13, 2017 1:00:23 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Create a new DataFrame with IsDelayed column",
      "text": "%spark\n\nval flightsWithDelays \u003d flights.select($\"Year\", $\"Month\", $\"DayofMonth\", $\"UniqueCarrier\", $\"FlightNum\", $\"DepDelay\", \n                    isDelayedUDF($\"DepDelay\").alias(\"IsDelayed\"))\n                    \nflightsWithDelays.show(5)",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 1:00:37 PM",
      "config": {
        "editorSetting": {
          "editOnDblClick": false,
          "language": "scala"
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379689_-639424173",
      "id": "20161017-203358_1309594443",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "dateStarted": "Aug 13, 2017 1:00:37 PM",
      "dateFinished": "Aug 13, 2017 1:00:37 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n\nNote that now we have a new table with a column that indicates whether a flight is delayed or not. This will allow us to calculate percentage of delayed flights in one pass.",
      "dateUpdated": "Aug 13, 2017 12:46:19 PM",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "editOnDblClick": true,
          "language": "markdown"
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379690_-638269926",
      "id": "20161017-205652_1397194952",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Calculate percentage of delayed flights using flightsWithDelays DataFrame",
      "text": "%spark\n\nflightsWithDelays.agg((sum(\"IsDelayed\") * 100 / count(\"DepDelay\")).alias(\"Percentage of Delayed Flights\")).show()",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 1:01:13 PM",
      "config": {
        "editorSetting": {
          "editOnDblClick": false,
          "language": "scala"
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": false,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379690_-638269926",
      "id": "20161017-205750_819957102",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "dateStarted": "Aug 13, 2017 1:01:13 PM",
      "dateFinished": "Aug 13, 2017 1:01:14 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\nAs you can see above, this is a very clean way of displaying a percentage of delayed flights. UDFs are useful in creating additional functions that are commonly used.\n\nNow let\u0027s explore our flights a bit more and find some averages.",
      "dateUpdated": "Aug 13, 2017 12:46:19 PM",
      "config": {
        "editorSetting": {},
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379702_-630574948",
      "id": "20161017-205919_1405069576",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Find Avg Taxi-in",
      "text": "%spark\n\nflights.select(\"Origin\", \"Dest\", \"TaxiIn\")\n        .groupBy(\"Origin\", \"Dest\")\n        .agg(avg(\"TaxiIn\")\n        .alias(\"AvgTaxiIn\"))\n        .orderBy(desc(\"AvgTaxiIn\"))\n        .show(10)",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 1:01:41 PM",
      "config": {
        "editorSetting": {
          "editOnDblClick": false,
          "language": "scala"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 6.0,
        "editorHide": false,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379706_-632113944",
      "id": "20160410-003138_1488719873",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "dateStarted": "Aug 13, 2017 1:01:41 PM",
      "dateFinished": "Aug 13, 2017 1:01:43 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Find Avg Taxi-out",
      "text": "%spark\n\nflights.select(\"Origin\", \"Dest\", \"TaxiOut\")\n        .groupBy(\"Origin\", \"Dest\")\n        .agg(avg(\"TaxiOut\")\n        .alias(\"AvgTaxiOut\"))\n        .orderBy(desc(\"AvgTaxiOut\"))\n        .show(10)",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 1:01:48 PM",
      "config": {
        "editorSetting": {
          "editOnDblClick": false,
          "language": "scala"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 6.0,
        "editorHide": false,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379707_-632498693",
      "id": "20160410-003138_840324935",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "dateStarted": "Aug 13, 2017 1:01:48 PM",
      "dateFinished": "Aug 13, 2017 1:01:49 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n### Part 2: Using SQL API to Analyze the Airline Data",
      "dateUpdated": "Aug 13, 2017 12:46:19 PM",
      "config": {
        "editorSetting": {},
        "editorMode": "ace/mode/markdown",
        "colWidth": 12.0,
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379707_-632498693",
      "id": "20160410-003138_582934314",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Is there a more interactive way to display query results?",
      "text": "%md\n\nAs you can see, the data displayed in Part 1 of this notebook isn\u0027t too interactive. To have a more dynamic experience, let\u0027s create a temporary (in-memory) view that we can query against and interact with the resulting data in a table or graph format. The temporary view will allow us to execute SQL queries against it.\n\nNote that the temporary view will reside in memory as long as the Spark session is alive.",
      "dateUpdated": "Aug 13, 2017 6:17:34 PM",
      "config": {
        "editorSetting": {},
        "editorMode": "ace/mode/markdown",
        "colWidth": 12.0,
        "editorHide": true,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379707_-632498693",
      "id": "20160410-003138_556617784",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Register a Temporary View",
      "text": "%spark\n\n// Convert flights DataFrame to a temporary view\nflights.createOrReplaceTempView(\"flightsView\")",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 1:01:59 PM",
      "config": {
        "editorSetting": {
          "editOnDblClick": false,
          "language": "scala"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12.0,
        "editorHide": false,
        "title": true,
        "results": [],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379707_-632498693",
      "id": "20160410-003138_636329356",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "dateStarted": "Aug 13, 2017 1:01:59 PM",
      "dateFinished": "Aug 13, 2017 1:01:59 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Preview Data in an interactive table format",
      "text": "%spark.sql\n\nSELECT * FROM flightsView LIMIT 20",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 6:17:40 PM",
      "config": {
        "editorSetting": {
          "editOnDblClick": false,
          "language": "sql"
        },
        "editorMode": "ace/mode/sql",
        "colWidth": 12.0,
        "editorHide": false,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [
                {
                  "name": "Year",
                  "index": 0.0,
                  "aggr": "sum"
                }
              ],
              "values": [
                {
                  "name": "Month",
                  "index": 1.0,
                  "aggr": "sum"
                }
              ],
              "groups": [],
              "scatter": {
                "xAxis": {
                  "name": "Year",
                  "index": 0.0,
                  "aggr": "sum"
                },
                "yAxis": {
                  "name": "Month",
                  "index": 1.0,
                  "aggr": "sum"
                }
              }
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379707_-632498693",
      "id": "20160410-003138_318924232",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "dateStarted": "Aug 13, 2017 1:02:05 PM",
      "dateFinished": "Aug 13, 2017 1:02:05 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Register a User Defined Function (UDF)",
      "text": "%spark\n\n// Register a helper UDF to find delayed flights\n// Note that this is a UDF specific for use with the sparkSession\n\n// Assume:\n//  if ArrDelay is not available then Delayed \u003d False\n//  if ArrDelay \u003e 15 min then Delayed \u003d True else False\n\nspark.udf.register(\"isDelayedUDF\", (time: String) \u003d\u003e if (time \u003d\u003d \"NA\") 0 else if (time.toInt \u003e 15) 1 else 0)",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 1:02:28 PM",
      "config": {
        "editorSetting": {
          "editOnDblClick": false,
          "language": "scala"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12.0,
        "editorHide": false,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379708_-634422437",
      "id": "20160410-003138_40384312",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "dateStarted": "Aug 13, 2017 1:02:28 PM",
      "dateFinished": "Aug 13, 2017 1:02:29 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Compare Total Number of Delayed Flights by Carrier",
      "text": "%spark.sql\n--- Compare Total Number of Delayed Flights by Carrier\nSELECT UniqueCarrier, SUM(isDelayedUDF(DepDelay)) AS NumDelays FROM flightsView GROUP BY UniqueCarrier",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 1:02:43 PM",
      "config": {
        "editorSetting": {
          "editOnDblClick": false,
          "language": "sql"
        },
        "editorMode": "ace/mode/sql",
        "colWidth": 6.0,
        "editorHide": false,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "pieChart",
              "height": 296.0,
              "optionOpen": false,
              "keys": [
                {
                  "name": "UniqueCarrier",
                  "index": 0.0,
                  "aggr": "sum"
                }
              ],
              "values": [
                {
                  "name": "NumDelays",
                  "index": 1.0,
                  "aggr": "sum"
                }
              ],
              "groups": [],
              "scatter": {
                "yAxis": {
                  "name": "NumDelays",
                  "index": 1.0,
                  "aggr": "sum"
                }
              }
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379708_-634422437",
      "id": "20160410-003138_134299332",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "dateStarted": "Aug 13, 2017 1:02:43 PM",
      "dateFinished": "Aug 13, 2017 1:02:44 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Compare Total Delayed Time (min) by Carrier",
      "text": "%spark.sql\n--- Compare Total Delayed Time (min) by Carrier\nSELECT UniqueCarrier, SUM(DepDelay) AS TotalTimeDelay FROM flightsView GROUP BY UniqueCarrier",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 1:02:46 PM",
      "config": {
        "editorSetting": {
          "editOnDblClick": false,
          "language": "sql"
        },
        "editorMode": "ace/mode/sql",
        "colWidth": 6.0,
        "editorHide": false,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "multiBarChart",
              "height": 300.0,
              "optionOpen": false,
              "keys": [
                {
                  "name": "UniqueCarrier",
                  "index": 0.0,
                  "aggr": "sum"
                }
              ],
              "values": [
                {
                  "name": "TotalTimeDelay",
                  "index": 1.0,
                  "aggr": "sum"
                }
              ],
              "groups": [],
              "scatter": {
                "xAxis": {
                  "name": "UniqueCarrier",
                  "index": 0.0,
                  "aggr": "sum"
                },
                "yAxis": {
                  "name": "TotalTimeDelay",
                  "index": 1.0,
                  "aggr": "sum"
                }
              }
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379708_-634422437",
      "id": "20160410-003138_163559927",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "dateStarted": "Aug 13, 2017 1:02:46 PM",
      "dateFinished": "Aug 13, 2017 1:02:47 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Find Average Distance Travelled by Carrier",
      "text": "%spark.sql\n--- Find Average Distance Travelled by Carrier\nSELECT UniqueCarrier, avg(Distance) AS AvgDistanceTraveled FROM flightsView GROUP BY UniqueCarrier ORDER BY AvgDistanceTraveled DESC",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 1:02:57 PM",
      "config": {
        "editorSetting": {
          "editOnDblClick": false,
          "language": "sql"
        },
        "editorMode": "ace/mode/sql",
        "colWidth": 12.0,
        "editorHide": false,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [
                {
                  "name": "UniqueCarrier",
                  "index": 0.0,
                  "aggr": "sum"
                }
              ],
              "values": [
                {
                  "name": "AvgDistanceTraveled",
                  "index": 1.0,
                  "aggr": "sum"
                }
              ],
              "groups": [],
              "scatter": {
                "xAxis": {
                  "name": "UniqueCarrier",
                  "index": 0.0,
                  "aggr": "sum"
                },
                "yAxis": {
                  "name": "AvgDistanceTraveled",
                  "index": 1.0,
                  "aggr": "sum"
                }
              }
            },
            "helium": {}
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379708_-634422437",
      "id": "20160410-003138_172624929",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "dateStarted": "Aug 13, 2017 1:02:53 PM",
      "dateFinished": "Aug 13, 2017 1:02:54 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Find Out When Most Flights Get Delayed by Day of Week",
      "text": "%spark.sql\n\nSELECT DayOfWeek, CASE WHEN isDelayedUDF(DepDelay) \u003d 1 THEN \u0027delayed\u0027 ELSE \u0027ok\u0027 END AS Delay, COUNT(1) AS Count\nFROM flightsView\nGROUP BY DayOfWeek, CASE WHEN isDelayedUDF(DepDelay) \u003d 1 THEN \u0027delayed\u0027 ELSE \u0027ok\u0027 END\nORDER BY DayOfWeek",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 1:03:08 PM",
      "config": {
        "editorSetting": {
          "editOnDblClick": false,
          "language": "sql"
        },
        "editorMode": "ace/mode/sql",
        "colWidth": 12.0,
        "editorHide": false,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "multiBarChart",
              "height": 300.0,
              "optionOpen": false,
              "keys": [
                {
                  "name": "DayOfWeek",
                  "index": 0.0,
                  "aggr": "sum"
                }
              ],
              "values": [
                {
                  "name": "Count",
                  "index": 2.0,
                  "aggr": "sum"
                }
              ],
              "groups": [
                {
                  "name": "Delay",
                  "index": 1.0,
                  "aggr": "sum"
                }
              ],
              "scatter": {
                "xAxis": {
                  "name": "DayOfWeek",
                  "index": 0.0,
                  "aggr": "sum"
                },
                "yAxis": {
                  "name": "Delay",
                  "index": 1.0,
                  "aggr": "sum"
                }
              }
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379708_-634422437",
      "id": "20160410-003138_56774606",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "dateStarted": "Aug 13, 2017 1:03:08 PM",
      "dateFinished": "Aug 13, 2017 1:03:09 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Find Out When Most Flights Get Delayed by Hour",
      "text": "%spark.sql\n\nSELECT CAST(CRSDepTime / 100 AS INT) AS Hour, CASE WHEN isDelayedUDF(DepDelay) \u003d 1 THEN \u0027delayed\u0027 ELSE \u0027ok\u0027 END AS Delay, COUNT(1) AS Count\nFROM flightsView\nGROUP BY CAST(CRSDepTime / 100 AS INT), CASE WHEN isDelayedUDF(DepDelay) \u003d 1 THEN \u0027delayed\u0027 ELSE \u0027ok\u0027 END\nORDER BY Hour",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 1:31:44 PM",
      "config": {
        "editorSetting": {
          "editOnDblClick": false,
          "language": "sql"
        },
        "editorMode": "ace/mode/sql",
        "colWidth": 12.0,
        "editorHide": false,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "stackedAreaChart",
              "height": 300.0,
              "optionOpen": false,
              "keys": [
                {
                  "name": "Hour",
                  "index": 0.0,
                  "aggr": "sum"
                }
              ],
              "values": [
                {
                  "name": "Count",
                  "index": 2.0,
                  "aggr": "sum"
                }
              ],
              "groups": [
                {
                  "name": "Delay",
                  "index": 1.0,
                  "aggr": "sum"
                }
              ],
              "scatter": {
                "xAxis": {
                  "name": "Hour",
                  "index": 0.0,
                  "aggr": "sum"
                },
                "yAxis": {
                  "name": "Delay",
                  "index": 1.0,
                  "aggr": "sum"
                }
              },
              "setting": {
                "stackedAreaChart": {
                  "style": "stack"
                }
              },
              "commonSetting": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379709_-634807186",
      "id": "20160410-003138_728063774",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "dateStarted": "Aug 13, 2017 1:03:49 PM",
      "dateFinished": "Aug 13, 2017 1:03:49 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Save to ORC file",
      "text": "%spark\n\nimport org.apache.spark.sql.SaveMode\n\n// Save and Overwrite our new DataFrame to an ORC file\nflightsWithDelays.write.format(\"orc\").mode(SaveMode.Overwrite).save(\"flightsWithDelays.orc\")",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 1:04:10 PM",
      "config": {
        "editorSetting": {
          "editOnDblClick": false,
          "language": "scala"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12.0,
        "editorHide": false,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379710_-633652939",
      "id": "20160410-003138_985965720",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "dateStarted": "Aug 13, 2017 1:04:10 PM",
      "dateFinished": "Aug 13, 2017 1:04:11 PM",
      "status": "ERROR",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Load back from an ORC file",
      "text": "%spark\n\n// Load results back from ORC file\nval test \u003d spark.read.format(\"orc\").load(\"flightsWithDelays.orc\")\n\n// Assert both DataFrames of the same size.\n//   Note that if assertion succeeds no warning messages will be printed\nassert (test.count \u003d\u003d flightsWithDelays.count, println(\"Assertion Fail: Files are of different sizes.\"))\n\ntest.show(10)",
      "dateUpdated": "Aug 13, 2017 1:11:28 PM",
      "config": {
        "editorSetting": {
          "editOnDblClick": false,
          "language": "scala"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12.0,
        "editorHide": false,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379710_-633652939",
      "id": "20160410-003138_1142035788",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Save DataFrame as Permanent Table",
      "text": "%spark\n\nflightsWithDelays.write.format(\"orc\").mode(SaveMode.Overwrite).saveAsTable(\"flightswithdelaystbl\")",
      "dateUpdated": "Aug 13, 2017 1:11:31 PM",
      "config": {
        "editorSetting": {
          "editOnDblClick": false,
          "language": "scala"
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "title": true,
        "results": [],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379710_-633652939",
      "id": "20161017-212148_1432557096",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Show Tables/Views",
      "text": "%spark.sql\n\nSHOW TABLES\n\n-- Note that flightsWithDelaysTbl is a permanent table instead of a temporary view!",
      "dateUpdated": "Aug 13, 2017 1:11:34 PM",
      "config": {
        "editorSetting": {
          "editOnDblClick": false,
          "language": "sql"
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/sql",
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [
                {
                  "name": "tableName",
                  "index": 0.0,
                  "aggr": "sum"
                }
              ],
              "values": [
                {
                  "name": "isTemporary",
                  "index": 1.0,
                  "aggr": "sum"
                }
              ],
              "groups": [],
              "scatter": {
                "xAxis": {
                  "name": "tableName",
                  "index": 0.0,
                  "aggr": "sum"
                },
                "yAxis": {
                  "name": "isTemporary",
                  "index": 1.0,
                  "aggr": "sum"
                }
              }
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379711_-634037688",
      "id": "20161017-212228_2044087527",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Querying a Permanent Table",
      "text": "%spark.sql\n\nSELECT COUNT(1) AS Total from flightswithdelaystbl  -- As you can see, there\u0027s no difference in querying a temporary view vs a permanent table",
      "dateUpdated": "Aug 13, 2017 1:11:40 PM",
      "config": {
        "editorSetting": {
          "editOnDblClick": false,
          "language": "sql"
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/sql",
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [
                {
                  "name": "Total",
                  "index": 0.0,
                  "aggr": "sum"
                }
              ],
              "values": [],
              "groups": [],
              "scatter": {
                "xAxis": {
                  "name": "Total",
                  "index": 0.0,
                  "aggr": "sum"
                }
              }
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379711_-634037688",
      "id": "20161017-212847_790820933",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Additional Resources",
      "text": "%md\n\nWe hope you\u0027ve enjoyed this introductory lab. Below are additional resources that you should find useful:\n\n1. [Hortonworks Apache Spark Tutorials](http://hortonworks.com/tutorials/#tuts-developers) are your natural next step where you can explore Spark in more depth.\n2. [Hortonworks Community Connection (HCC)](https://community.hortonworks.com/spaces/85/data-science.html?type\u003dquestion) is a great resource for questions and answers on Spark, Data Analytics/Science, and many more Big Data topics.\n3. [Hortonworks Apache Spark Docs](http://docs.hortonworks.com/HDPDocuments/HDP2/HDP-2.5.0/bk_spark-component-guide/content/ch_developing-spark-apps.html) - official Spark documentation.\n4. [Hortonworks Apache Zeppelin Docs](http://docs.hortonworks.com/HDPDocuments/HDP2/HDP-2.5.0/bk_zeppelin-component-guide/content/ch_using_zeppelin.html) - official Zeppelin documentation.",
      "dateUpdated": "Aug 13, 2017 1:14:34 PM",
      "config": {
        "tableHide": true,
        "editorSetting": {
          "editOnDblClick": true,
          "language": "markdown"
        },
        "editorMode": "ace/mode/markdown",
        "colWidth": 10.0,
        "editorHide": false,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379711_-634037688",
      "id": "20160410-003138_2048237853",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.pyspark\n\nflights_df \u003d spark.read.option(\"header\", \"true\").option(\"inferSchema\", \"true\").csv(\"/tmp/flights.csv\")\nflights_df.registerTempTable(\"pythontable\")\n\n",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 1:22:34 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502630127816_-1439993044",
      "id": "20170813-131527_213577893",
      "dateCreated": "Aug 13, 2017 1:15:27 PM",
      "dateStarted": "Aug 13, 2017 1:22:34 PM",
      "dateFinished": "Aug 13, 2017 1:22:34 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.sql\n\nselect * from pythontable\n",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 1:23:34 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/sql"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502630503855_-2001971102",
      "id": "20170813-132143_1404058392",
      "dateCreated": "Aug 13, 2017 1:21:43 PM",
      "dateStarted": "Aug 13, 2017 1:23:34 PM",
      "dateFinished": "Aug 13, 2017 1:23:34 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%angular\n\u003c/br\u003e\n\u003ccenter\u003e\n\u003ca href\u003d\"https://community.hortonworks.com/spaces/85/data-science.html?type\u003dquestion\" target\u003d\u0027_blank\u0027\u003e\n  \u003cimg src\u003d\"http://hortonworks.com/wp-content/uploads/2016/03/logo-hcc.png\" alt\u003d\"HCC\" style\u003d\"width:125px;height:125px;border:0;\" align\u003d\"middle\"\u003e\n\u003c/a\u003e\n\u003c/center\u003e",
      "dateUpdated": "Aug 13, 2017 12:46:19 PM",
      "config": {
        "editorSetting": {},
        "editorMode": "ace/mode/scala",
        "colWidth": 2.0,
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379712_-648273397",
      "id": "20160410-003138_1663715025",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%sh\n\npwd\n",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 1:29:02 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502630765339_385378855",
      "id": "20170813-132605_453381337",
      "dateCreated": "Aug 13, 2017 1:26:05 PM",
      "dateStarted": "Aug 13, 2017 1:29:02 PM",
      "dateFinished": "Aug 13, 2017 1:29:02 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%dep\n",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 5:59:14 PM",
      "config": {},
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502647154174_905848441",
      "id": "20170813-175914_813395123",
      "dateCreated": "Aug 13, 2017 5:59:14 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "Labs / Spark 2.x / Data Worker / Scala / 101 - Intro to SparkSQL",
  "id": "2CSGRDE7D",
  "angularObjects": {
    "2CQVAAMSF:shared_process": [],
    "2CPJCJQ52:shared_process": [],
    "2CR55RN9F:shared_process": [],
    "2CQ5M8DDR:shared_process": [],
    "2CT12AQEX:shared_process": [],
    "2CR382C2Q:shared_process": [],
    "2CRWTXXDA:shared_process": [],
    "2CPZMEV6C:shared_process": [],
    "2CSJS4NXD:shared_process": []
  },
  "config": {},
  "info": {}
}