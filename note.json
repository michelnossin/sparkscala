{
  "paragraphs": [
    {
      "text": "%md\n\nLets get some api which does not require any authentication. This one shows some Train information in Json:\nhttps://www.septastats.com/api\nfor example:\nhttps://www.septastats.com/api/current/system/latest\n\nSome other link to read: http://randerzander.github.io/#?post\u003ddata-apps.md\n",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 7:04:38 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eLets get some api which does not require any authentication. This one shows some Train information in Json:\u003cbr/\u003e\u003ca href\u003d\"https://www.septastats.com/api\"\u003ehttps://www.septastats.com/api\u003c/a\u003e\u003cbr/\u003efor example:\u003cbr/\u003e\u003ca href\u003d\"https://www.septastats.com/api/current/system/latest\"\u003ehttps://www.septastats.com/api/current/system/latest\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eSome other link to read: \u003ca href\u003d\"http://randerzander.github.io/#?post\u003ddata-apps.md\"\u003ehttp://randerzander.github.io/#?post\u003ddata-apps.md\u003c/a\u003e\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1502648053199_-187365512",
      "id": "20170813-181413_407884137",
      "dateCreated": "Aug 13, 2017 6:14:13 PM",
      "dateStarted": "Aug 13, 2017 7:04:38 PM",
      "dateFinished": "Aug 13, 2017 7:04:38 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Dependency for next steps",
      "text": "%dep\n \nz.load(\"org.scalaj:scalaj-http_2.10:2.2.1\")\nz.load(\"org.json4s:json4s-native_2.10:3.2.11\")\n//import org.apache.spark.streaming.receiver._",
      "user": "anonymous",
      "dateUpdated": "Aug 26, 2017 9:01:41 AM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "res0: org.apache.zeppelin.dep.Dependency \u003d org.apache.zeppelin.dep.Dependency@1bc7346b\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1502658858007_1887163028",
      "id": "20170813-211418_570037273",
      "dateCreated": "Aug 13, 2017 9:14:18 PM",
      "dateStarted": "Aug 26, 2017 9:01:42 AM",
      "dateFinished": "Aug 26, 2017 9:01:49 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Call api in simple Scala (run late, trains don\u0027t run at American nights)",
      "text": "val url \u003d \"https://www.septastats.com/api/current/system/latest\"\nval result \u003d scala.io.Source.fromURL(url).mkString\nprintln(result)\n",
      "user": "anonymous",
      "dateUpdated": "Aug 26, 2017 9:01:59 AM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\nurl: String \u003d https://www.septastats.com/api/current/system/latest\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nresult: String \u003d\n{\n    \"metadata\": {\n        \"elapsed\": 0.19174599647522,\n        \"_comment\": \"Info on all currently running trains.\"\n    },\n    \"data\": [\n        {\n            \"id\": \"403-Airport\",\n            \"time\": \"2017-08-26T05:01:58\",\n            \"late\": \"0\",\n            \"lat\": \"39.95258\",\n            \"lon\": \"-75.18739\",\n            \"nextstop\": \"University City\",\n            \"source\": \"Glenside\",\n            \"dest\": \"Airport\"\n        },\n        {\n            \"id\": \"405-Airport\",\n            \"time\": \"2017-08-26T05:01:58\",\n            \"late\": \"1\",\n            \"lat\": \"40.05972\",\n            \"lon\": \"-75.12936\",\n            \"nextstop\": \"Fern Rock TC\",\n            \"source\": \"Glenside\",\n            \"dest\": \"Airport\"\n        },\n        {\n            \"id\": \"9740-Temple U\",\n            \"tim...{\n    \"metadata\": {\n        \"elapsed\": 0.19174599647522,\n        \"_comment\": \"Info on all currently running trains.\"\n    },\n    \"data\": [\n        {\n            \"id\": \"403-Airport\",\n            \"time\": \"2017-08-26T05:01:58\",\n            \"late\": \"0\",\n            \"lat\": \"39.95258\",\n            \"lon\": \"-75.18739\",\n            \"nextstop\": \"University City\",\n            \"source\": \"Glenside\",\n            \"dest\": \"Airport\"\n        },\n        {\n            \"id\": \"405-Airport\",\n            \"time\": \"2017-08-26T05:01:58\",\n            \"late\": \"1\",\n            \"lat\": \"40.05972\",\n            \"lon\": \"-75.12936\",\n            \"nextstop\": \"Fern Rock TC\",\n            \"source\": \"Glenside\",\n            \"dest\": \"Airport\"\n        },\n        {\n            \"id\": \"9740-Temple U\",\n            \"time\": \"2017-08-26T05:00:17\",\n            \"late\": \"117\",\n            \"lat\": \"39.98060\",\n            \"lon\": \"-75.14987\",\n            \"nextstop\": \"Temple U\",\n            \"source\": \"Temple U\",\n            \"dest\": \"Temple U\"\n        }\n    ]\n}\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1502648435583_-1443974556",
      "id": "20170813-182035_2110339470",
      "dateCreated": "Aug 13, 2017 6:20:35 PM",
      "dateStarted": "Aug 26, 2017 9:01:59 AM",
      "dateFinished": "Aug 26, 2017 9:02:08 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Parse api output to json",
      "text": "%spark\n\ncase class Steps(id:String,time:String,late:String,lat:String,lon:String,nextstop:String,source:String,dest:String)\ncase class ActivitiesStep(`data`: Seq[Steps])\n\nimport org.json4s.{DefaultFormats, JString}\nimport org.json4s.JsonAST.{JArray, JObject}\nimport scalaj.http.{Http, Token, HttpResponse}\nimport org.json4s.native.JsonMethods._\n\nimplicit val formats \u003d DefaultFormats\n\nval jsonResponse \u003d parse(result)\nval activitiesStep \u003d jsonResponse.extract[ActivitiesStep]\n",
      "user": "anonymous",
      "dateUpdated": "Aug 26, 2017 9:02:18 AM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\ndefined class Steps\n\ndefined class ActivitiesStep\n\nimport org.json4s.{DefaultFormats, JString}\n\nimport org.json4s.JsonAST.{JArray, JObject}\n\nimport scalaj.http.{Http, Token, HttpResponse}\n\nimport org.json4s.native.JsonMethods._\n\nformats: org.json4s.DefaultFormats.type \u003d org.json4s.DefaultFormats$@528db4fe\njsonResponse: org.json4s.JValue \u003d JObject(List((metadata,JObject(List((elapsed,JDouble(0.19174599647522)), (_comment,JString(Info on all currently running trains.))))), (data,JArray(List(JObject(List((id,JString(403-Airport)), (time,JString(2017-08-26T05:01:58)), (late,JString(0)), (lat,JString(39.95258)), (lon,JString(-75.18739)), (nextstop,JString(University City)), (source,JString(Glenside)), (dest,JString(Airport)))), JObject(List((id,JString(405-Airport)), (time,JString(2017-08-26T05:01:58)), (late,JString(1)), (lat,JString(40.05972)), (lon,JString(-75.12936)), (nextstop,JString(Fern Rock TC)), (source,JString(Glenside)), (dest,JString(Airport)))), JObject(List((id,JString(9740-Temple U)), (time,JString(2017-08-26T05:00:17)), (late,JString(117)), (lat,JString(39.98060)), (lon,JStri...\nactivitiesStep: ActivitiesStep \u003d ActivitiesStep(List(Steps(403-Airport,2017-08-26T05:01:58,0,39.95258,-75.18739,University City,Glenside,Airport), Steps(405-Airport,2017-08-26T05:01:58,1,40.05972,-75.12936,Fern Rock TC,Glenside,Airport), Steps(9740-Temple U,2017-08-26T05:00:17,117,39.98060,-75.14987,Temple U,Temple U,Temple U)))\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1502648580083_-30624925",
      "id": "20170813-182300_1103961718",
      "dateCreated": "Aug 13, 2017 6:23:00 PM",
      "dateStarted": "Aug 26, 2017 9:02:19 AM",
      "dateFinished": "Aug 26, 2017 9:02:21 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Create a table of this json",
      "text": "%spark\n \nprintln(\"%table id\\ttime\\tlat\\tlon\")\nactivitiesStep.`data`.foreach( x \u003d\u003e \n    println(s\"${x.id}\\t${x.time}\\t${x.lat.toDouble}\\t${x.lon.toDouble}\")\n)",
      "user": "anonymous",
      "dateUpdated": "Aug 26, 2017 9:03:09 AM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false
            },
            "helium": {}
          }
        },
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "id\ttime\tlat\tlon\n403-Airport\t2017-08-26T05:01:58\t39.95258\t-75.18739\n405-Airport\t2017-08-26T05:01:58\t40.05972\t-75.12936\n9740-Temple U\t2017-08-26T05:00:17\t39.9806\t-75.14987\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1502649102305_-681284576",
      "id": "20170813-183142_208336200",
      "dateCreated": "Aug 13, 2017 6:31:42 PM",
      "dateStarted": "Aug 26, 2017 9:03:09 AM",
      "dateFinished": "Aug 26, 2017 9:03:10 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Great lets convert to Spark DF",
      "text": "%spark\n \n//println(\"%table id\\ttime\\tlat\\tlon\")\nval df \u003d activitiesStep.`data`.toDF\n",
      "user": "anonymous",
      "dateUpdated": "Aug 26, 2017 9:03:27 AM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\ndf: org.apache.spark.sql.DataFrame \u003d [id: string, time: string ... 6 more fields]\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1502652361567_1378459350",
      "id": "20170813-192601_2085468738",
      "dateCreated": "Aug 13, 2017 7:26:01 PM",
      "dateStarted": "Aug 26, 2017 9:03:27 AM",
      "dateFinished": "Aug 26, 2017 9:03:29 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "df.registerTempTable(\"myMap\")\n//var msg \u003d dataValidatorSrv.validateMapData(df);",
      "user": "anonymous",
      "dateUpdated": "Aug 26, 2017 9:03:42 AM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\nwarning: there was one deprecation warning; re-run with -deprecation for details\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1502695300268_-1517879309",
      "id": "20170814-072140_551585768",
      "dateCreated": "Aug 14, 2017 7:21:40 AM",
      "dateStarted": "Aug 26, 2017 9:03:42 AM",
      "dateFinished": "Aug 26, 2017 9:03:43 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "z.show(df)\n",
      "user": "anonymous",
      "dateUpdated": "Aug 26, 2017 9:03:47 AM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false
            },
            "helium": {}
          }
        },
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "id\ttime\tlate\tlat\tlon\tnextstop\tsource\tdest\n403-Airport\t2017-08-26T05:01:58\t0\t39.95258\t-75.18739\tUniversity City\tGlenside\tAirport\n405-Airport\t2017-08-26T05:01:58\t1\t40.05972\t-75.12936\tFern Rock TC\tGlenside\tAirport\n9740-Temple U\t2017-08-26T05:00:17\t117\t39.98060\t-75.14987\tTemple U\tTemple U\tTemple U\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1502652401640_106504677",
      "id": "20170813-192641_223426987",
      "dateCreated": "Aug 13, 2017 7:26:41 PM",
      "dateStarted": "Aug 26, 2017 9:03:47 AM",
      "dateFinished": "Aug 26, 2017 9:03:47 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%angular\n\u003clink rel\u003d\"stylesheet\" href\u003d\"https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.5/leaflet.css\" /\u003e\n\u003cdiv id\u003d\"map\" style\u003d\"height: 500px; width: 100%\"\u003e\u003c/div\u003e\n\n\u003cscript type\u003d\"text/javascript\"\u003e\nfunction initMap() {\n    var map \u003d L.map(\u0027map\u0027).setView([30.00, -30.00], 3);\n    L.tileLayer(\u0027http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\u0027).addTo(map);\n    var geoMarkers \u003d L.layerGroup().addTo(map);\n    \n    var el \u003d angular.element($(\u0027#map\u0027).parent(\u0027.ng-scope\u0027));\n    angular.element(el).ready(function() {\n        window.locationWatcher \u003d el.scope().compiledScope.$watch(\u0027locations\u0027, function(newValue, oldValue) {\n            geoMarkers.clearLayers();\n            angular.forEach(newValue, function(event) {\n                if (event)\n                  var marker \u003d L.marker([event.values[1], event.values[2]]).bindPopup(event.values[0]).addTo(geoMarkers);\n            });\n        })\n    });\n}\n\nif (window.locationWatcher) { window.locationWatcher(); }\n\n// ensure we only load the script once, seems to cause issues otherwise\nif (window.L) {\n    initMap();\n} else {\n    console.log(\u0027Loading Leaflet library\u0027);\n    var sc \u003d document.createElement(\u0027script\u0027);\n    sc.type \u003d \u0027text/javascript\u0027;\n    sc.src \u003d \u0027https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.5/leaflet.js\u0027;\n    sc.onload \u003d initMap;\n    sc.onerror \u003d function(err) { alert(err); }\n    document.getElementsByTagName(\u0027head\u0027)[0].appendChild(sc);\n}\n\u003c/script\u003e",
      "user": "anonymous",
      "dateUpdated": "Aug 26, 2017 10:32:28 AM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/undefined",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "ANGULAR",
            "data": "\u003clink rel\u003d\"stylesheet\" href\u003d\"https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.5/leaflet.css\" /\u003e\n\u003cdiv id\u003d\"map\" style\u003d\"height: 500px; width: 100%\"\u003e\u003c/div\u003e\n\n\u003cscript type\u003d\"text/javascript\"\u003e\nfunction initMap() {\n    var map \u003d L.map(\u0027map\u0027).setView([30.00, -30.00], 3);\n    L.tileLayer(\u0027http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\u0027).addTo(map);\n    var geoMarkers \u003d L.layerGroup().addTo(map);\n    \n    var el \u003d angular.element($(\u0027#map\u0027).parent(\u0027.ng-scope\u0027));\n    angular.element(el).ready(function() {\n        window.locationWatcher \u003d el.scope().compiledScope.$watch(\u0027locations\u0027, function(newValue, oldValue) {\n            geoMarkers.clearLayers();\n            angular.forEach(newValue, function(event) {\n                if (event)\n                  var marker \u003d L.marker([event.values[1], event.values[2]]).bindPopup(event.values[0]).addTo(geoMarkers);\n            });\n        })\n    });\n}\n\nif (window.locationWatcher) { window.locationWatcher(); }\n\n// ensure we only load the script once, seems to cause issues otherwise\nif (window.L) {\n    initMap();\n} else {\n    console.log(\u0027Loading Leaflet library\u0027);\n    var sc \u003d document.createElement(\u0027script\u0027);\n    sc.type \u003d \u0027text/javascript\u0027;\n    sc.src \u003d \u0027https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.5/leaflet.js\u0027;\n    sc.onload \u003d initMap;\n    sc.onerror \u003d function(err) { alert(err); }\n    document.getElementsByTagName(\u0027head\u0027)[0].appendChild(sc);\n}\n\u003c/script\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1502694855709_-749932539",
      "id": "20170814-071415_1932225156",
      "dateCreated": "Aug 14, 2017 7:14:15 AM",
      "dateStarted": "Aug 26, 2017 10:32:28 AM",
      "dateFinished": "Aug 26, 2017 10:32:28 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val map_pings \u003d spark.sql(\"select concat(id,\u0027 (late: \u0027,late,\u0027 mins)\u0027) as desc,lat,lon as lng from myMap\")\n//map_pings.write.json(\"trainfile.json\")\nz.angularUnbind(\"locations\")\nz.angularBind(\"locations\", map_pings.collect())\n",
      "user": "anonymous",
      "dateUpdated": "Aug 26, 2017 9:05:08 AM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\nmap_pings: org.apache.spark.sql.DataFrame \u003d [desc: string, lat: string ... 1 more field]\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1503143093401_-461188555",
      "id": "20170819-114453_647379419",
      "dateCreated": "Aug 19, 2017 11:44:53 AM",
      "dateStarted": "Aug 26, 2017 9:05:08 AM",
      "dateFinished": "Aug 26, 2017 9:05:09 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Change python to point to python 3",
      "text": "%sh\n\necho --- are there multiple pythons, as we use wrong python 2 version --\nls /usr/bin/python*\necho ------\necho current python is `which python` ,before change this should be /usr/bin/python\necho want this python version `/usr/bin/python3 --version`\necho create a soft link in local/bin which is cheched before normal bin dir:\nln -s /usr/bin/python3  /usr/local/bin/python\necho python now points to `which python`\necho We are now using version `python --version`\necho lets install tkinter required for matplotlib later on\npip install matplotlib\napt-get install python3-tk \u003c\u003c\u003c $\"Y\\n\"",
      "user": "anonymous",
      "dateUpdated": "Aug 26, 2017 10:39:39 AM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "sh",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/sh",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "--- are there multiple pythons, as we use wrong python 2 version --\n/usr/bin/python\n/usr/bin/python2\n/usr/bin/python2.7\n/usr/bin/python3\n/usr/bin/python3.4\n/usr/bin/python3.4m\n/usr/bin/python3m\n------\ncurrent python is /usr/local/bin/python ,before change this should be /usr/bin/python\nwant this python version Python 3.4.2\ncreate a soft link in local/bin which is cheched before normal bin dir:\nln: failed to create symbolic link ‘/usr/local/bin/python’: File exists\npython now points to /usr/local/bin/python\nWe are now using version Python 3.4.2\nRequirement already satisfied: matplotlib in /usr/local/lib/python3.4/dist-packages\nRequirement already satisfied: python-dateutil in /usr/local/lib/python3.4/dist-packages (from matplotlib)\nRequirement already satisfied: pyparsing!\u003d2.0.0,!\u003d2.0.4,!\u003d2.1.2,!\u003d2.1.6,\u003e\u003d1.5.6 in /usr/local/lib/python3.4/dist-packages (from matplotlib)\nRequirement already satisfied: six\u003e\u003d1.10 in /usr/local/lib/python3.4/dist-packages (from matplotlib)\nRequirement already satisfied: numpy\u003e\u003d1.7.1 in /usr/local/lib/python3.4/dist-packages (from matplotlib)\nRequirement already satisfied: cycler\u003e\u003d0.10 in /usr/local/lib/python3.4/dist-packages (from matplotlib)\nRequirement already satisfied: pytz in /usr/local/lib/python3.4/dist-packages (from matplotlib)\nReading package lists...\nBuilding dependency tree...\nReading state information...\nThe following extra packages will be installed:\n  blt fontconfig-config fonts-dejavu-core libfontconfig1 libfreetype6\n  libpng12-0 libtcl8.6 libtk8.6 libxft2 libxrender1 libxss1 tk8.6-blt2.5 ucf\n  x11-common\nSuggested packages:\n  blt-demo tcl8.6 tk8.6 tix python3-tk-dbg\nThe following NEW packages will be installed:\n  blt fontconfig-config fonts-dejavu-core libfontconfig1 libfreetype6\n  libpng12-0 libtcl8.6 libtk8.6 libxft2 libxrender1 libxss1 python3-tk\n  tk8.6-blt2.5 ucf x11-common\n0 upgraded, 15 newly installed, 0 to remove and 14 not upgraded.\nNeed to get 5,124 kB of archives.\nAfter this operation, 14.5 MB of additional disk space will be used.\nDo you want to continue? [Y/n] Get:1 http://deb.debian.org/debian/ jessie/main libpng12-0 amd64 1.2.50-2+deb8u3 [173 kB]\nGet:2 http://deb.debian.org/debian/ jessie/main libfreetype6 amd64 2.5.2-3+deb8u2 [466 kB]\nGet:3 http://deb.debian.org/debian/ jessie/main ucf all 3.0030 [69.7 kB]\nGet:4 http://deb.debian.org/debian/ jessie/main fonts-dejavu-core all 2.34-1 [1,047 kB]\nGet:5 http://deb.debian.org/debian/ jessie/main fontconfig-config all 2.11.0-6.3+deb8u1 [274 kB]\nGet:6 http://deb.debian.org/debian/ jessie/main libfontconfig1 amd64 2.11.0-6.3+deb8u1 [329 kB]\nGet:7 http://deb.debian.org/debian/ jessie/main libtcl8.6 amd64 8.6.2+dfsg-2 [978 kB]\nGet:8 http://deb.debian.org/debian/ jessie/main libxrender1 amd64 1:0.9.8-1+b1 [31.4 kB]\nGet:9 http://deb.debian.org/debian/ jessie/main libxft2 amd64 2.3.2-1 [55.4 kB]\nGet:10 http://deb.debian.org/debian/ jessie/main x11-common all 1:7.7+7 [287 kB]\nGet:11 http://deb.debian.org/debian/ jessie/main libxss1 amd64 1:1.2.2-1 [17.5 kB]\nGet:12 http://deb.debian.org/debian/ jessie/main libtk8.6 amd64 8.6.2-1 [771 kB]\nGet:13 http://deb.debian.org/debian/ jessie/main tk8.6-blt2.5 amd64 2.5.3+dfsg-1 [586 kB]\nGet:14 http://deb.debian.org/debian/ jessie/main blt amd64 2.5.3+dfsg-1 [14.3 kB]\nGet:15 http://deb.debian.org/debian/ jessie/main python3-tk amd64 3.4.2-1+b1 [25.2 kB]\ndebconf: delaying package configuration, since apt-utils is not installed\nFetched 5,124 kB in 2s (1,757 kB/s)\nSelecting previously unselected package libpng12-0:amd64.\r\n(Reading database ... \r(Reading database ... 5%\r(Reading database ... 10%\r(Reading database ... 15%\r(Reading database ... 20%\r(Reading database ... 25%\r(Reading database ... 30%\r(Reading database ... 35%\r(Reading database ... 40%\r(Reading database ... 45%\r(Reading database ... 50%\r(Reading database ... 55%\r(Reading database ... 60%\r(Reading database ... 65%\r(Reading database ... 70%\r(Reading database ... 75%\r(Reading database ... 80%\r(Reading database ... 85%\r(Reading database ... 90%\r(Reading database ... 95%\r(Reading database ... 100%\r(Reading database ... 23965 files and directories currently installed.)\r\nPreparing to unpack .../libpng12-0_1.2.50-2+deb8u3_amd64.deb ...\r\nUnpacking libpng12-0:amd64 (1.2.50-2+deb8u3) ...\r\nSelecting previously unselected package libfreetype6:amd64.\r\nPreparing to unpack .../libfreetype6_2.5.2-3+deb8u2_amd64.deb ...\r\nUnpacking libfreetype6:amd64 (2.5.2-3+deb8u2) ...\r\nSelecting previously unselected package ucf.\r\nPreparing to unpack .../archives/ucf_3.0030_all.deb ...\r\nMoving old data out of the way\r\nUnpacking ucf (3.0030) ...\r\nSelecting previously unselected package fonts-dejavu-core.\r\nPreparing to unpack .../fonts-dejavu-core_2.34-1_all.deb ...\r\nUnpacking fonts-dejavu-core (2.34-1) ...\r\nSelecting previously unselected package fontconfig-config.\r\nPreparing to unpack .../fontconfig-config_2.11.0-6.3+deb8u1_all.deb ...\r\nUnpacking fontconfig-config (2.11.0-6.3+deb8u1) ...\r\nSelecting previously unselected package libfontconfig1:amd64.\r\nPreparing to unpack .../libfontconfig1_2.11.0-6.3+deb8u1_amd64.deb ...\r\nUnpacking libfontconfig1:amd64 (2.11.0-6.3+deb8u1) ...\r\nSelecting previously unselected package libtcl8.6:amd64.\r\nPreparing to unpack .../libtcl8.6_8.6.2+dfsg-2_amd64.deb ...\r\nUnpacking libtcl8.6:amd64 (8.6.2+dfsg-2) ...\r\nSelecting previously unselected package libxrender1:amd64.\r\nPreparing to unpack .../libxrender1_1%3a0.9.8-1+b1_amd64.deb ...\r\nUnpacking libxrender1:amd64 (1:0.9.8-1+b1) ...\r\nSelecting previously unselected package libxft2:amd64.\r\nPreparing to unpack .../libxft2_2.3.2-1_amd64.deb ...\r\nUnpacking libxft2:amd64 (2.3.2-1) ...\r\nSelecting previously unselected package x11-common.\r\nPreparing to unpack .../x11-common_1%3a7.7+7_all.deb ...\r\nUnpacking x11-common (1:7.7+7) ...\r\nSelecting previously unselected package libxss1:amd64.\r\nPreparing to unpack .../libxss1_1%3a1.2.2-1_amd64.deb ...\r\nUnpacking libxss1:amd64 (1:1.2.2-1) ...\r\nSelecting previously unselected package libtk8.6:amd64.\r\nPreparing to unpack .../libtk8.6_8.6.2-1_amd64.deb ...\r\nUnpacking libtk8.6:amd64 (8.6.2-1) ...\r\nSelecting previously unselected package tk8.6-blt2.5.\r\nPreparing to unpack .../tk8.6-blt2.5_2.5.3+dfsg-1_amd64.deb ...\r\nUnpacking tk8.6-blt2.5 (2.5.3+dfsg-1) ...\r\nSelecting previously unselected package blt.\r\nPreparing to unpack .../blt_2.5.3+dfsg-1_amd64.deb ...\r\nUnpacking blt (2.5.3+dfsg-1) ...\r\nSelecting previously unselected package python3-tk.\r\nPreparing to unpack .../python3-tk_3.4.2-1+b1_amd64.deb ...\r\nUnpacking python3-tk (3.4.2-1+b1) ...\r\nProcessing triggers for systemd (215-17+deb8u7) ...\r\nSetting up libpng12-0:amd64 (1.2.50-2+deb8u3) ...\r\nSetting up libfreetype6:amd64 (2.5.2-3+deb8u2) ...\r\nSetting up ucf (3.0030) ...\r\ndebconf: unable to initialize frontend: Dialog\r\ndebconf: (No usable dialog-like program is installed, so the dialog based frontend cannot be used. at /usr/share/perl5/Debconf/FrontEnd/Dialog.pm line 76.)\r\ndebconf: falling back to frontend: Readline\r\nSetting up fonts-dejavu-core (2.34-1) ...\r\nSetting up fontconfig-config (2.11.0-6.3+deb8u1) ...\r\ndebconf: unable to initialize frontend: Dialog\r\ndebconf: (No usable dialog-like program is installed, so the dialog based frontend cannot be used. at /usr/share/perl5/Debconf/FrontEnd/Dialog.pm line 76.)\r\ndebconf: falling back to frontend: Readline\r\nSetting up libfontconfig1:amd64 (2.11.0-6.3+deb8u1) ...\r\nSetting up libtcl8.6:amd64 (8.6.2+dfsg-2) ...\r\nSetting up libxrender1:amd64 (1:0.9.8-1+b1) ...\r\nSetting up libxft2:amd64 (2.3.2-1) ...\r\nSetting up x11-common (1:7.7+7) ...\r\ndebconf: unable to initialize frontend: Dialog\r\ndebconf: (No usable dialog-like program is installed, so the dialog based frontend cannot be used. at /usr/share/perl5/Debconf/FrontEnd/Dialog.pm line 76.)\r\ndebconf: falling back to frontend: Readline\r\nupdate-rc.d: warning: start and stop actions are no longer supported; falling back to defaults\r\ninvoke-rc.d: policy-rc.d denied execution of start.\r\nSetting up libxss1:amd64 (1:1.2.2-1) ...\r\nSetting up libtk8.6:amd64 (8.6.2-1) ...\r\nSetting up tk8.6-blt2.5 (2.5.3+dfsg-1) ...\r\nSetting up blt (2.5.3+dfsg-1) ...\r\nSetting up python3-tk (3.4.2-1+b1) ...\r\nProcessing triggers for libc-bin (2.19-18+deb8u9) ...\r\nProcessing triggers for systemd (215-17+deb8u7) ...\r\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1503739511959_-902294987",
      "id": "20170826-092511_1517309700",
      "dateCreated": "Aug 26, 2017 9:25:11 AM",
      "dateStarted": "Aug 26, 2017 10:38:50 AM",
      "dateFinished": "Aug 26, 2017 10:39:10 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Python 3 pandas test (kernel restart maybe required as default uses python 2)",
      "text": "%python\n\n#To check python version: help()\nimport numpy as np\nimport pandas as pd\n\nd \u003d {\u0027one\u0027 : pd.Series([1., 2., 3.], index\u003d[\u0027a\u0027, \u0027b\u0027, \u0027c\u0027]), \u0027two\u0027 : pd.Series([1., 2., 3., 4.], index\u003d[\u0027a\u0027, \u0027b\u0027, \u0027c\u0027, \u0027d\u0027])}\ndf \u003d pd.DataFrame(d)\ndf2 \u003d df[:int(z.input(\"maxrows\",2))]\nz.show(df2)\n\n### Input form\n#print (z.input(\"f1\",\"defaultValue\"))\n\n### Select form\n#print (z.select(\"f1\",[(\"o1\",\"1\"),(\"o2\",\"2\")],\"2\"))\n\n### Checkbox form\n#print(\"\".join(z.checkbox(\"f3\", [(\"o1\",\"1\"), (\"o2\",\"2\")],[\"1\"])))\n",
      "user": "anonymous",
      "dateUpdated": "Aug 26, 2017 10:29:52 AM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "multiBarChart": {
                  "stacked": false
                }
              },
              "commonSetting": {},
              "keys": [
                {
                  "name": "one",
                  "index": 0.0,
                  "aggr": "sum"
                }
              ],
              "groups": [],
              "values": [
                {
                  "name": "two",
                  "index": 1.0,
                  "aggr": "sum"
                }
              ]
            },
            "helium": {}
          }
        },
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python",
        "runOnSelectionChange": true,
        "title": true
      },
      "settings": {
        "params": {
          "f1": "o1",
          "f3": [
            "1",
            "o2"
          ],
          "maxrows": "2",
          "name": "sunny"
        },
        "forms": {
          "maxrows": {
            "name": "maxrows",
            "displayName": "maxrows",
            "type": "input",
            "defaultValue": 2.0,
            "hidden": false
          }
        }
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "one\ttwo\n1.0\t1.0\n2.0\t2.0\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1503738949303_-922850311",
      "id": "20170826-091549_686076233",
      "dateCreated": "Aug 26, 2017 9:15:49 AM",
      "dateStarted": "Aug 26, 2017 10:29:05 AM",
      "dateFinished": "Aug 26, 2017 10:29:05 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%sql\nselect id as desc,lat,lon as lng from myMap",
      "user": "anonymous",
      "dateUpdated": "Aug 26, 2017 9:08:57 AM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false
            },
            "helium": {}
          }
        },
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/sql"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "desc\tlat\tlng\n403-Airport\t39.95258\t-75.18739\n405-Airport\t40.05972\t-75.12936\n9740-Temple U\t39.98060\t-75.14987\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1503143144848_1449899748",
      "id": "20170819-114544_12191171",
      "dateCreated": "Aug 19, 2017 11:45:44 AM",
      "dateStarted": "Aug 26, 2017 9:06:13 AM",
      "dateFinished": "Aug 26, 2017 9:06:13 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\nIn case you dont have any api data use sections below to manually create some map data\n",
      "user": "anonymous",
      "dateUpdated": "Aug 19, 2017 11:50:21 AM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eIn case you dont have any api data use sections below to manually create some map data\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1503143394308_-525615644",
      "id": "20170819-114954_631656349",
      "dateCreated": "Aug 19, 2017 11:49:54 AM",
      "dateStarted": "Aug 19, 2017 11:50:21 AM",
      "dateFinished": "Aug 19, 2017 11:50:22 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "//Paste in empty note\nspark.sql(\"drop table myTable2\")\nval map_pings \u003d spark.sql(\"select \u0027michel\u0027 as desc,52.379189 as lat,4.899431 as lng\")\nmap_pings.write.mode(\"append\").saveAsTable(\"myTable2\")\nz.angularUnbind(\"locations\")\nz.angularBind(\"locations\", map_pings.collect())\n\n",
      "user": "anonymous",
      "dateUpdated": "Aug 19, 2017 11:51:33 AM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/scala",
        "editorHide": false,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\nres19: org.apache.spark.sql.DataFrame \u003d []\n\nmap_pings: org.apache.spark.sql.DataFrame \u003d [desc: string, lat: decimal(8,6) ... 1 more field]\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1502694921658_-1022475967",
      "id": "20170814-071521_71735724",
      "dateCreated": "Aug 14, 2017 7:15:21 AM",
      "dateStarted": "Aug 19, 2017 11:13:47 AM",
      "dateFinished": "Aug 19, 2017 11:13:48 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n#### Datasets . Dataframes are datasets but of type Row. Dataframe will not go away as R and python dont support statically types structures",
      "user": "anonymous",
      "dateUpdated": "Aug 19, 2017 12:08:50 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch4\u003eDatasets . Dataframes are datasets but of type Row. Dataframe will not go away as R and python dont support statically types structures\u003c/h4\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1503144462161_323811928",
      "id": "20170819-120742_503366981",
      "dateCreated": "Aug 19, 2017 12:07:42 PM",
      "dateStarted": "Aug 19, 2017 12:08:50 PM",
      "dateFinished": "Aug 19, 2017 12:08:50 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Create simple manual Dataset",
      "text": "import spark.implicits._\ncase class Person(id: Long, name: String)\nval caseClassDS \u003d Seq(Person(1,\"Name1\"),Person(2,\"Name2\")).toDS()\n",
      "user": "anonymous",
      "dateUpdated": "Aug 19, 2017 12:18:30 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": false,
        "tableHide": true,
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\nimport spark.implicits._\n\ndefined class Person\n\ncaseClassDS: org.apache.spark.sql.Dataset[Person] \u003d [id: bigint, name: string]\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1503144533994_-2133301817",
      "id": "20170819-120853_254331498",
      "dateCreated": "Aug 19, 2017 12:08:53 PM",
      "dateStarted": "Aug 19, 2017 12:18:27 PM",
      "dateFinished": "Aug 19, 2017 12:18:28 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Or load in file using red schema",
      "text": "//Use structType when using Dataframes instead of Datasets\n case class Train(\n      desc: String,\n      lat: String,\n      lng: String\n      )\n      \nval ds \u003d spark.read.json(\"trainfile.json\").as[Train]\nds.registerTempTable(\"train\")",
      "user": "anonymous",
      "dateUpdated": "Aug 19, 2017 3:06:01 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\ndefined class Train\n\nds: org.apache.spark.sql.Dataset[Train] \u003d [desc: string, lat: string ... 1 more field]\n\nwarning: there was one deprecation warning; re-run with -deprecation for details\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1503144673902_1218877432",
      "id": "20170819-121113_1154885430",
      "dateCreated": "Aug 19, 2017 12:11:13 PM",
      "dateStarted": "Aug 19, 2017 12:31:38 PM",
      "dateFinished": "Aug 19, 2017 12:31:39 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%sql\nselect * from train limit 5",
      "user": "anonymous",
      "dateUpdated": "Aug 19, 2017 12:31:53 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/sql"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "desc\tlat\tlng\n805-Chestnut H West (late: 5 mins)\t40.05032\t-75.19187\n807-Chestnut H West (late: 0 mins)\t40.06326\t-75.08735\n810-Fox Chase (late: 4 mins)\t39.969262\t-75.197291\n9410-Temple U (late: 0 mins)\t40.01272\t-75.16187\n9415-Airport (late: 0 mins)\t39.95344\t-75.16376\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1503145840453_-1814648174",
      "id": "20170819-123040_1413400796",
      "dateCreated": "Aug 19, 2017 12:30:40 PM",
      "dateStarted": "Aug 19, 2017 12:31:53 PM",
      "dateFinished": "Aug 19, 2017 12:31:53 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "dataset combines idd stuff like map with data frame stuff",
      "text": "val dsNew \u003d ds.filter((\"lat \u003c 41\")).withColumn(\"latShort\",substring($\"lat\",0,2)).groupBy($\"latShort\").count() //.map(x \u003d\u003e x.desc.split\ndsNew.registerTempTable(\"trainnew\")\n\nspark.sql(\"select * from trainnew\").show(5)\n     //groupBy($\"latShort\").\n      //count()\n",
      "user": "anonymous",
      "dateUpdated": "Aug 19, 2017 2:05:31 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\ndsNew: org.apache.spark.sql.DataFrame \u003d [latShort: string, count: bigint]\n\nwarning: there was one deprecation warning; re-run with -deprecation for details\n+--------+-----+\n|latShort|count|\n+--------+-----+\n|      40|   13|\n|      39|   10|\n+--------+-----+\n\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1503146011241_-1222257461",
      "id": "20170819-123331_467831639",
      "dateCreated": "Aug 19, 2017 12:33:31 PM",
      "dateStarted": "Aug 19, 2017 2:05:31 PM",
      "dateFinished": "Aug 19, 2017 2:05:32 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "UDF, however as we are using Json this is not serializable and will fail UDF",
      "text": " object AgeRange extends Enumeration {\n    implicit val formats \u003d DefaultFormats\n    val Zero, Ten, Twenty, Thirty, Fourty, Fifty, Sixty, Seventy, Eighty, Ninety, HundretPlus \u003d Value\n    def getAgeRange(age: Integer) \u003d {\n      implicit val formats \u003d DefaultFormats\n      age match {\n        case age if 0 until 10 contains age \u003d\u003e Zero\n        case age if 11 until 20 contains age \u003d\u003e Ten\n        case age if 21 until 30 contains age \u003d\u003e Twenty\n        case age if 31 until 40 contains age \u003d\u003e Thirty\n        case age if 41 until 50 contains age \u003d\u003e Fourty\n        case age if 51 until 60 contains age \u003d\u003e Fifty\n        case age if 61 until 70 contains age \u003d\u003e Sixty\n        case age if 71 until 80 contains age \u003d\u003e Seventy\n        case age if 81 until 90 contains age \u003d\u003e Eighty\n        case age if 91 until 100 contains age \u003d\u003e Ninety\n        case _ \u003d\u003e HundretPlus\n      }\n    }\n    def asString(age: Integer) \u003d getAgeRange(age).toString\n  }\nspark.udf.register(\"toTekst\", AgeRange.asString _)\nprint(AgeRange.getAgeRange(44))\n//spark.sql(\"select latShort,toTekst(latshort) from trainnew\").show(5) ",
      "user": "anonymous",
      "dateUpdated": "Aug 19, 2017 3:04:30 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\ndefined object AgeRange\n\nres212: org.apache.spark.sql.expressions.UserDefinedFunction \u003d UserDefinedFunction(\u003cfunction1\u003e,StringType,Some(List(IntegerType)))\nFourty"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1503149170331_1672652319",
      "id": "20170819-132610_1551929151",
      "dateCreated": "Aug 19, 2017 1:26:10 PM",
      "dateStarted": "Aug 19, 2017 3:03:53 PM",
      "dateFinished": "Aug 19, 2017 3:03:54 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Spark streaming",
      "text": "%md\n\nYou create a spark streaming context from spark content, and next a Discrete Stream. eg.\n\nval ssc    \u003d new StreamingContext(sc, Seconds(5) )\nval discreteStream \u003d TwitterUtils.createStream(ssc,None).window( Seconds(60) )\nssc.start()\nssc.awaitTermination()",
      "user": "anonymous",
      "dateUpdated": "Aug 19, 2017 3:37:52 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "title": true,
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eYou create a spark streaming context from spark content, and next a Discrete Stream. eg.\u003c/p\u003e\n\u003cp\u003eval ssc \u003d new StreamingContext(sc, Seconds(5) )\u003cbr/\u003eval discreteStream \u003d TwitterUtils.createStream(ssc,None).window( Seconds(60) )\u003cbr/\u003essc.start()\u003cbr/\u003essc.awaitTermination()\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1503156910175_1524508365",
      "id": "20170819-153510_1620336822",
      "dateCreated": "Aug 19, 2017 3:35:10 PM",
      "dateStarted": "Aug 19, 2017 3:37:52 PM",
      "dateFinished": "Aug 19, 2017 3:37:52 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "stream some manually types terminal text",
      "text": "//on prompt : docker exec \u003ccontainer id\u003e bash\n//apt-get install netcat\n//nc -l -p 9999\n//type in text + ENTER\n//check output on this screen.\n\nimport org.apache.spark._\nimport org.apache.spark.streaming._\n\nStreamingContext.getActive.foreach { _.stop(stopSparkContext \u003d false) }\n\nval ssc \u003d new StreamingContext(sc, Seconds(5) )\nval lines \u003d ssc.socketTextStream(\"localhost\", 9999)\nval words \u003d lines.flatMap(_.split(\" \"))\nval pairs \u003d words.map(word \u003d\u003e (word, 1))\nval wordCounts \u003d pairs.reduceByKey(_ + _)\n\n// Print the first ten elements of each RDD generated in this DStream to the console\nwordCounts.print()\nlines.foreachRDD { rdd \u003d\u003e \n    rdd.toDF(\"word\").registerTempTable(\"batch_word_count\")    \n}\n\nssc.start()\n\n// This is to ensure that we wait for some time before the background streaming job starts. This will put this cell on hold for 5 times the batchIntervalSeconds.\nssc.awaitTerminationOrTimeout(1 * 50 * 1000)",
      "user": "anonymous",
      "dateUpdated": "Aug 20, 2017 8:29:57 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\nimport org.apache.spark._\n\nimport org.apache.spark.streaming._\n\nssc: org.apache.spark.streaming.StreamingContext \u003d org.apache.spark.streaming.StreamingContext@1a84ca7a\n\nlines: org.apache.spark.streaming.dstream.ReceiverInputDStream[String] \u003d org.apache.spark.streaming.dstream.SocketInputDStream@a59a054\n\nwords: org.apache.spark.streaming.dstream.DStream[String] \u003d org.apache.spark.streaming.dstream.FlatMappedDStream@30f88a30\n\npairs: org.apache.spark.streaming.dstream.DStream[(String, Int)] \u003d org.apache.spark.streaming.dstream.MappedDStream@6a096832\n\nwordCounts: org.apache.spark.streaming.dstream.DStream[(String, Int)] \u003d org.apache.spark.streaming.dstream.ShuffledDStream@3cf4aa4b\n\nwarning: there was one deprecation warning; re-run with -deprecation for details\n-------------------------------------------\nTime: 1503260885000 ms\n-------------------------------------------\n\n-------------------------------------------\nTime: 1503260890000 ms\n-------------------------------------------\n\n-------------------------------------------\nTime: 1503260895000 ms\n-------------------------------------------\n\n-------------------------------------------\nTime: 1503260900000 ms\n-------------------------------------------\n\n-------------------------------------------\nTime: 1503260905000 ms\n-------------------------------------------\n\n-------------------------------------------\nTime: 1503260910000 ms\n-------------------------------------------\n\n-------------------------------------------\nTime: 1503260915000 ms\n-------------------------------------------\n(hallo,1)\n\n-------------------------------------------\nTime: 1503260920000 ms\n-------------------------------------------\n(michel,1)\n(michel;,1)\n\n-------------------------------------------\nTime: 1503260925000 ms\n-------------------------------------------\n(best,1)\n(michel,1)\n(is,1)\n\n-------------------------------------------\nTime: 1503260930000 ms\n-------------------------------------------\n\n\nres31: Boolean \u003d false\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1503257270272_1974821860",
      "id": "20170820-192750_1491470411",
      "dateCreated": "Aug 20, 2017 7:27:50 PM",
      "dateStarted": "Aug 20, 2017 8:27:58 PM",
      "dateFinished": "Aug 20, 2017 8:28:53 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Verify Spark Version (should be 2.x)",
      "text": "%spark\n\nspark.version",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 6:06:50 PM",
      "config": {
        "editorSetting": {
          "editOnDblClick": false,
          "language": "scala"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12.0,
        "editorHide": false,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\nres0: String \u003d 2.1.1\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1502628379666_-616723988",
      "id": "20160410-003138_631425785",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "dateStarted": "Aug 13, 2017 6:06:14 PM",
      "dateFinished": "Aug 13, 2017 6:06:21 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Download CSV flight data file ",
      "text": "%sh\n\n# You will now download a subset of 2008 flights (only 100k lines)\n# The full dataset may be found here: http://stat-computing.org/dataexpo/2009/the-data.html\n\nwget https://raw.githubusercontent.com/roberthryniewicz/datasets/master/airline-dataset/flights/flights.csv -O /tmp/flights.csv\necho \"Downloaded!\"",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 12:49:39 PM",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "editOnDblClick": false,
          "language": "sh"
        },
        "editorMode": "ace/mode/sh",
        "colWidth": 12.0,
        "editorHide": false,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379666_-616723988",
      "id": "20160410-003138_1540125404",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "dateStarted": "Aug 13, 2017 12:49:39 PM",
      "dateFinished": "Aug 13, 2017 12:49:42 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Preview Downloaded File",
      "text": "%sh\n\ncat /tmp/flights.csv | head",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 12:49:42 PM",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "editOnDblClick": false,
          "language": "sh"
        },
        "editorMode": "ace/mode/sh",
        "colWidth": 12.0,
        "editorHide": false,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379667_-617108737",
      "id": "20160410-003138_226044813",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "dateStarted": "Aug 13, 2017 12:49:42 PM",
      "dateFinished": "Aug 13, 2017 12:49:42 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Move dataset to HDFS (if supported/available)",
      "text": "%sh\n\n# remove existing copies of dataset from HDFS\n#hdfs dfs -rm -r -f /tmp/flights.csv\n\n# put data into HDFS\nhdfs dfs -put /tmp/flights.csv /tmp/",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 12:50:35 PM",
      "config": {
        "editorSetting": {
          "editOnDblClick": false,
          "language": "sh"
        },
        "editorMode": "ace/mode/sh",
        "colWidth": 12.0,
        "editorHide": false,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379667_-617108737",
      "id": "20160410-003138_1267267737",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "dateStarted": "Aug 13, 2017 12:50:35 PM",
      "dateFinished": "Aug 13, 2017 12:50:36 PM",
      "status": "ERROR",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Create a DataFrame from CSV file",
      "text": "%spark\n\n// Create a flights DataFrame from CSV file\nval flights \u003d spark.read\n              .option(\"header\", \"true\")                              // Use first line as header\n              .option(\"inferSchema\", \"true\")                         // Infer schema\n              .csv(\"/tmp/flights.csv\")                               // Read data",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 12:50:56 PM",
      "config": {
        "editorSetting": {
          "editOnDblClick": false,
          "language": "scala"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12.0,
        "editorHide": false,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379683_-635576684",
      "id": "20160410-003138_236600548",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "dateStarted": "Aug 13, 2017 12:50:56 PM",
      "dateFinished": "Aug 13, 2017 12:50:58 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Print Schema",
      "text": "%spark\n\n// Print the schema in a tree format\nflights.printSchema()",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 12:51:17 PM",
      "config": {
        "editorSetting": {
          "editOnDblClick": false,
          "language": "scala"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12.0,
        "editorHide": false,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379684_-637500428",
      "id": "20160410-003138_1553179639",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "dateStarted": "Aug 13, 2017 12:51:17 PM",
      "dateFinished": "Aug 13, 2017 12:51:17 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Show a subset of columns",
      "text": "%spark\n\n// Show a subset of columns with \"select\"\nflights.select(\"UniqueCarrier\", \"FlightNum\", \"DepDelay\", \"ArrDelay\", \"Distance\").show()",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 12:52:23 PM",
      "config": {
        "editorSetting": {
          "editOnDblClick": false,
          "language": "scala"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12.0,
        "editorHide": false,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379687_-637115679",
      "id": "20160410-003138_1188332400",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "dateStarted": "Aug 13, 2017 12:52:23 PM",
      "dateFinished": "Aug 13, 2017 12:52:25 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "flights.registerTempTable(\"myflights\")\n",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 12:54:14 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628791812_1353035495",
      "id": "20170813-125311_1020018220",
      "dateCreated": "Aug 13, 2017 12:53:11 PM",
      "dateStarted": "Aug 13, 2017 12:54:14 PM",
      "dateFinished": "Aug 13, 2017 12:54:15 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.sql\n\nselect `UniqueCarrier`, count(`FlightNum`) from myflights group by UniqueCarrier\n",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 1:13:19 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false
            },
            "helium": {}
          }
        },
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/sql"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628764011_-204104601",
      "id": "20170813-125244_185104000",
      "dateCreated": "Aug 13, 2017 12:52:44 PM",
      "dateStarted": "Aug 13, 2017 12:56:31 PM",
      "dateFinished": "Aug 13, 2017 12:56:33 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Apply a filter to find flights delayed more than 15 min",
      "text": "%spark\n\n// Create a Dataset containing flights with delayed departure by more than 15 min using \"filter\"\nval delayedFlights \u003d flights\n                        .select(\"UniqueCarrier\", \"DepDelay\")\n                        .filter($\"DepDelay\" \u003e 15)\n                        \ndelayedFlights.show()",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 12:57:05 PM",
      "config": {
        "editorSetting": {
          "editOnDblClick": false,
          "language": "scala"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12.0,
        "editorHide": false,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379688_-639039424",
      "id": "20160410-003138_704729700",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "dateStarted": "Aug 13, 2017 12:57:05 PM",
      "dateFinished": "Aug 13, 2017 12:57:06 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Display percentage of delayed flights",
      "text": "%spark\n\nval numTotalFlights \u003d flights.count()\nval numDelayedFlights \u003d delayedFlights.count()\n\n// Print total number of delayed flights\nprintln(\"Percentage of Delayed Flights: \" + (numDelayedFlights.toFloat/numTotalFlights*100) + \"%\")",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 1:00:12 PM",
      "config": {
        "editorSetting": {
          "editOnDblClick": false,
          "language": "scala"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12.0,
        "editorHide": false,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379688_-639039424",
      "id": "20160410-003138_1019754695",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "dateStarted": "Aug 13, 2017 1:00:12 PM",
      "dateFinished": "Aug 13, 2017 1:00:14 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": " Create a UDF to determine delays",
      "text": "%spark\n\nimport org.apache.spark.sql.functions.udf\n\n// Define a UDF to find delayed flights\n\n// Assume:\n//  if ArrDelay is not available then Delayed \u003d False\n//  if ArrDelay \u003e 15 min then Delayed \u003d True else False\n\nval isDelayedUDF \u003d udf((time: String) \u003d\u003e if (time \u003d\u003d \"NA\") 0 else if (time.toInt \u003e 15) 1 else 0)",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 1:00:22 PM",
      "config": {
        "editorSetting": {
          "editOnDblClick": false,
          "language": "scala"
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379689_-639424173",
      "id": "20161017-203017_1781904338",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "dateStarted": "Aug 13, 2017 1:00:22 PM",
      "dateFinished": "Aug 13, 2017 1:00:23 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Create a new DataFrame with IsDelayed column",
      "text": "%spark\n\nval flightsWithDelays \u003d flights.select($\"Year\", $\"Month\", $\"DayofMonth\", $\"UniqueCarrier\", $\"FlightNum\", $\"DepDelay\", \n                    isDelayedUDF($\"DepDelay\").alias(\"IsDelayed\"))\n                    \nflightsWithDelays.show(5)",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 1:00:37 PM",
      "config": {
        "editorSetting": {
          "editOnDblClick": false,
          "language": "scala"
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379689_-639424173",
      "id": "20161017-203358_1309594443",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "dateStarted": "Aug 13, 2017 1:00:37 PM",
      "dateFinished": "Aug 13, 2017 1:00:37 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n\nNote that now we have a new table with a column that indicates whether a flight is delayed or not. This will allow us to calculate percentage of delayed flights in one pass.",
      "dateUpdated": "Aug 13, 2017 12:46:19 PM",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "editOnDblClick": true,
          "language": "markdown"
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379690_-638269926",
      "id": "20161017-205652_1397194952",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Calculate percentage of delayed flights using flightsWithDelays DataFrame",
      "text": "%spark\n\nflightsWithDelays.agg((sum(\"IsDelayed\") * 100 / count(\"DepDelay\")).alias(\"Percentage of Delayed Flights\")).show()",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 1:01:13 PM",
      "config": {
        "editorSetting": {
          "editOnDblClick": false,
          "language": "scala"
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": false,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379690_-638269926",
      "id": "20161017-205750_819957102",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "dateStarted": "Aug 13, 2017 1:01:13 PM",
      "dateFinished": "Aug 13, 2017 1:01:14 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\nAs you can see above, this is a very clean way of displaying a percentage of delayed flights. UDFs are useful in creating additional functions that are commonly used.\n\nNow let\u0027s explore our flights a bit more and find some averages.",
      "dateUpdated": "Aug 13, 2017 12:46:19 PM",
      "config": {
        "editorSetting": {},
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379702_-630574948",
      "id": "20161017-205919_1405069576",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Find Avg Taxi-in",
      "text": "%spark\n\nflights.select(\"Origin\", \"Dest\", \"TaxiIn\")\n        .groupBy(\"Origin\", \"Dest\")\n        .agg(avg(\"TaxiIn\")\n        .alias(\"AvgTaxiIn\"))\n        .orderBy(desc(\"AvgTaxiIn\"))\n        .show(10)",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 1:01:41 PM",
      "config": {
        "editorSetting": {
          "editOnDblClick": false,
          "language": "scala"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 6.0,
        "editorHide": false,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379706_-632113944",
      "id": "20160410-003138_1488719873",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "dateStarted": "Aug 13, 2017 1:01:41 PM",
      "dateFinished": "Aug 13, 2017 1:01:43 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Find Avg Taxi-out",
      "text": "%spark\n\nflights.select(\"Origin\", \"Dest\", \"TaxiOut\")\n        .groupBy(\"Origin\", \"Dest\")\n        .agg(avg(\"TaxiOut\")\n        .alias(\"AvgTaxiOut\"))\n        .orderBy(desc(\"AvgTaxiOut\"))\n        .show(10)",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 1:01:48 PM",
      "config": {
        "editorSetting": {
          "editOnDblClick": false,
          "language": "scala"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 6.0,
        "editorHide": false,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379707_-632498693",
      "id": "20160410-003138_840324935",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "dateStarted": "Aug 13, 2017 1:01:48 PM",
      "dateFinished": "Aug 13, 2017 1:01:49 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n### Part 2: Using SQL API to Analyze the Airline Data",
      "dateUpdated": "Aug 13, 2017 12:46:19 PM",
      "config": {
        "editorSetting": {},
        "editorMode": "ace/mode/markdown",
        "colWidth": 12.0,
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379707_-632498693",
      "id": "20160410-003138_582934314",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Is there a more interactive way to display query results?",
      "text": "%md\n\nAs you can see, the data displayed in Part 1 of this notebook isn\u0027t too interactive. To have a more dynamic experience, let\u0027s create a temporary (in-memory) view that we can query against and interact with the resulting data in a table or graph format. The temporary view will allow us to execute SQL queries against it.\n\nNote that the temporary view will reside in memory as long as the Spark session is alive.",
      "dateUpdated": "Aug 13, 2017 6:17:34 PM",
      "config": {
        "editorSetting": {},
        "editorMode": "ace/mode/markdown",
        "colWidth": 12.0,
        "editorHide": true,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379707_-632498693",
      "id": "20160410-003138_556617784",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Register a Temporary View",
      "text": "%spark\n\n// Convert flights DataFrame to a temporary view\nflights.createOrReplaceTempView(\"flightsView\")",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 1:01:59 PM",
      "config": {
        "editorSetting": {
          "editOnDblClick": false,
          "language": "scala"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12.0,
        "editorHide": false,
        "title": true,
        "results": [],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379707_-632498693",
      "id": "20160410-003138_636329356",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "dateStarted": "Aug 13, 2017 1:01:59 PM",
      "dateFinished": "Aug 13, 2017 1:01:59 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Preview Data in an interactive table format",
      "text": "%spark.sql\n\nSELECT * FROM flightsView LIMIT 20",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 6:17:40 PM",
      "config": {
        "editorSetting": {
          "editOnDblClick": false,
          "language": "sql"
        },
        "editorMode": "ace/mode/sql",
        "colWidth": 12.0,
        "editorHide": false,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [
                {
                  "name": "Year",
                  "index": 0.0,
                  "aggr": "sum"
                }
              ],
              "values": [
                {
                  "name": "Month",
                  "index": 1.0,
                  "aggr": "sum"
                }
              ],
              "groups": [],
              "scatter": {
                "xAxis": {
                  "name": "Year",
                  "index": 0.0,
                  "aggr": "sum"
                },
                "yAxis": {
                  "name": "Month",
                  "index": 1.0,
                  "aggr": "sum"
                }
              }
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379707_-632498693",
      "id": "20160410-003138_318924232",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "dateStarted": "Aug 13, 2017 1:02:05 PM",
      "dateFinished": "Aug 13, 2017 1:02:05 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Register a User Defined Function (UDF)",
      "text": "%spark\n\n// Register a helper UDF to find delayed flights\n// Note that this is a UDF specific for use with the sparkSession\n\n// Assume:\n//  if ArrDelay is not available then Delayed \u003d False\n//  if ArrDelay \u003e 15 min then Delayed \u003d True else False\n\nspark.udf.register(\"isDelayedUDF\", (time: String) \u003d\u003e if (time \u003d\u003d \"NA\") 0 else if (time.toInt \u003e 15) 1 else 0)",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 1:02:28 PM",
      "config": {
        "editorSetting": {
          "editOnDblClick": false,
          "language": "scala"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12.0,
        "editorHide": false,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379708_-634422437",
      "id": "20160410-003138_40384312",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "dateStarted": "Aug 13, 2017 1:02:28 PM",
      "dateFinished": "Aug 13, 2017 1:02:29 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Compare Total Number of Delayed Flights by Carrier",
      "text": "%spark.sql\n--- Compare Total Number of Delayed Flights by Carrier\nSELECT UniqueCarrier, SUM(isDelayedUDF(DepDelay)) AS NumDelays FROM flightsView GROUP BY UniqueCarrier",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 1:02:43 PM",
      "config": {
        "editorSetting": {
          "editOnDblClick": false,
          "language": "sql"
        },
        "editorMode": "ace/mode/sql",
        "colWidth": 6.0,
        "editorHide": false,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "pieChart",
              "height": 296.0,
              "optionOpen": false,
              "keys": [
                {
                  "name": "UniqueCarrier",
                  "index": 0.0,
                  "aggr": "sum"
                }
              ],
              "values": [
                {
                  "name": "NumDelays",
                  "index": 1.0,
                  "aggr": "sum"
                }
              ],
              "groups": [],
              "scatter": {
                "yAxis": {
                  "name": "NumDelays",
                  "index": 1.0,
                  "aggr": "sum"
                }
              }
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379708_-634422437",
      "id": "20160410-003138_134299332",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "dateStarted": "Aug 13, 2017 1:02:43 PM",
      "dateFinished": "Aug 13, 2017 1:02:44 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Compare Total Delayed Time (min) by Carrier",
      "text": "%spark.sql\n--- Compare Total Delayed Time (min) by Carrier\nSELECT UniqueCarrier, SUM(DepDelay) AS TotalTimeDelay FROM flightsView GROUP BY UniqueCarrier",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 1:02:46 PM",
      "config": {
        "editorSetting": {
          "editOnDblClick": false,
          "language": "sql"
        },
        "editorMode": "ace/mode/sql",
        "colWidth": 6.0,
        "editorHide": false,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "multiBarChart",
              "height": 300.0,
              "optionOpen": false,
              "keys": [
                {
                  "name": "UniqueCarrier",
                  "index": 0.0,
                  "aggr": "sum"
                }
              ],
              "values": [
                {
                  "name": "TotalTimeDelay",
                  "index": 1.0,
                  "aggr": "sum"
                }
              ],
              "groups": [],
              "scatter": {
                "xAxis": {
                  "name": "UniqueCarrier",
                  "index": 0.0,
                  "aggr": "sum"
                },
                "yAxis": {
                  "name": "TotalTimeDelay",
                  "index": 1.0,
                  "aggr": "sum"
                }
              }
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379708_-634422437",
      "id": "20160410-003138_163559927",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "dateStarted": "Aug 13, 2017 1:02:46 PM",
      "dateFinished": "Aug 13, 2017 1:02:47 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Find Average Distance Travelled by Carrier",
      "text": "%spark.sql\n--- Find Average Distance Travelled by Carrier\nSELECT UniqueCarrier, avg(Distance) AS AvgDistanceTraveled FROM flightsView GROUP BY UniqueCarrier ORDER BY AvgDistanceTraveled DESC",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 1:02:57 PM",
      "config": {
        "editorSetting": {
          "editOnDblClick": false,
          "language": "sql"
        },
        "editorMode": "ace/mode/sql",
        "colWidth": 12.0,
        "editorHide": false,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [
                {
                  "name": "UniqueCarrier",
                  "index": 0.0,
                  "aggr": "sum"
                }
              ],
              "values": [
                {
                  "name": "AvgDistanceTraveled",
                  "index": 1.0,
                  "aggr": "sum"
                }
              ],
              "groups": [],
              "scatter": {
                "xAxis": {
                  "name": "UniqueCarrier",
                  "index": 0.0,
                  "aggr": "sum"
                },
                "yAxis": {
                  "name": "AvgDistanceTraveled",
                  "index": 1.0,
                  "aggr": "sum"
                }
              }
            },
            "helium": {}
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379708_-634422437",
      "id": "20160410-003138_172624929",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "dateStarted": "Aug 13, 2017 1:02:53 PM",
      "dateFinished": "Aug 13, 2017 1:02:54 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Find Out When Most Flights Get Delayed by Day of Week",
      "text": "%spark.sql\n\nSELECT DayOfWeek, CASE WHEN isDelayedUDF(DepDelay) \u003d 1 THEN \u0027delayed\u0027 ELSE \u0027ok\u0027 END AS Delay, COUNT(1) AS Count\nFROM flightsView\nGROUP BY DayOfWeek, CASE WHEN isDelayedUDF(DepDelay) \u003d 1 THEN \u0027delayed\u0027 ELSE \u0027ok\u0027 END\nORDER BY DayOfWeek",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 1:03:08 PM",
      "config": {
        "editorSetting": {
          "editOnDblClick": false,
          "language": "sql"
        },
        "editorMode": "ace/mode/sql",
        "colWidth": 12.0,
        "editorHide": false,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "multiBarChart",
              "height": 300.0,
              "optionOpen": false,
              "keys": [
                {
                  "name": "DayOfWeek",
                  "index": 0.0,
                  "aggr": "sum"
                }
              ],
              "values": [
                {
                  "name": "Count",
                  "index": 2.0,
                  "aggr": "sum"
                }
              ],
              "groups": [
                {
                  "name": "Delay",
                  "index": 1.0,
                  "aggr": "sum"
                }
              ],
              "scatter": {
                "xAxis": {
                  "name": "DayOfWeek",
                  "index": 0.0,
                  "aggr": "sum"
                },
                "yAxis": {
                  "name": "Delay",
                  "index": 1.0,
                  "aggr": "sum"
                }
              }
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379708_-634422437",
      "id": "20160410-003138_56774606",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "dateStarted": "Aug 13, 2017 1:03:08 PM",
      "dateFinished": "Aug 13, 2017 1:03:09 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Find Out When Most Flights Get Delayed by Hour",
      "text": "%spark.sql\n\nSELECT CAST(CRSDepTime / 100 AS INT) AS Hour, CASE WHEN isDelayedUDF(DepDelay) \u003d 1 THEN \u0027delayed\u0027 ELSE \u0027ok\u0027 END AS Delay, COUNT(1) AS Count\nFROM flightsView\nGROUP BY CAST(CRSDepTime / 100 AS INT), CASE WHEN isDelayedUDF(DepDelay) \u003d 1 THEN \u0027delayed\u0027 ELSE \u0027ok\u0027 END\nORDER BY Hour",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 1:31:44 PM",
      "config": {
        "editorSetting": {
          "editOnDblClick": false,
          "language": "sql"
        },
        "editorMode": "ace/mode/sql",
        "colWidth": 12.0,
        "editorHide": false,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "stackedAreaChart",
              "height": 300.0,
              "optionOpen": false,
              "keys": [
                {
                  "name": "Hour",
                  "index": 0.0,
                  "aggr": "sum"
                }
              ],
              "values": [
                {
                  "name": "Count",
                  "index": 2.0,
                  "aggr": "sum"
                }
              ],
              "groups": [
                {
                  "name": "Delay",
                  "index": 1.0,
                  "aggr": "sum"
                }
              ],
              "scatter": {
                "xAxis": {
                  "name": "Hour",
                  "index": 0.0,
                  "aggr": "sum"
                },
                "yAxis": {
                  "name": "Delay",
                  "index": 1.0,
                  "aggr": "sum"
                }
              },
              "setting": {
                "stackedAreaChart": {
                  "style": "stack"
                }
              },
              "commonSetting": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379709_-634807186",
      "id": "20160410-003138_728063774",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "dateStarted": "Aug 13, 2017 1:03:49 PM",
      "dateFinished": "Aug 13, 2017 1:03:49 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Save to ORC file",
      "text": "%spark\n\nimport org.apache.spark.sql.SaveMode\n\n// Save and Overwrite our new DataFrame to an ORC file\nflightsWithDelays.write.format(\"orc\").mode(SaveMode.Overwrite).save(\"flightsWithDelays.orc\")",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 1:04:10 PM",
      "config": {
        "editorSetting": {
          "editOnDblClick": false,
          "language": "scala"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12.0,
        "editorHide": false,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379710_-633652939",
      "id": "20160410-003138_985965720",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "dateStarted": "Aug 13, 2017 1:04:10 PM",
      "dateFinished": "Aug 13, 2017 1:04:11 PM",
      "status": "ERROR",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Load back from an ORC file",
      "text": "%spark\n\n// Load results back from ORC file\nval test \u003d spark.read.format(\"orc\").load(\"flightsWithDelays.orc\")\n\n// Assert both DataFrames of the same size.\n//   Note that if assertion succeeds no warning messages will be printed\nassert (test.count \u003d\u003d flightsWithDelays.count, println(\"Assertion Fail: Files are of different sizes.\"))\n\ntest.show(10)",
      "dateUpdated": "Aug 13, 2017 1:11:28 PM",
      "config": {
        "editorSetting": {
          "editOnDblClick": false,
          "language": "scala"
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12.0,
        "editorHide": false,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379710_-633652939",
      "id": "20160410-003138_1142035788",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Save DataFrame as Permanent Table",
      "text": "%spark\n\nflightsWithDelays.write.format(\"orc\").mode(SaveMode.Overwrite).saveAsTable(\"flightswithdelaystbl\")",
      "dateUpdated": "Aug 13, 2017 1:11:31 PM",
      "config": {
        "editorSetting": {
          "editOnDblClick": false,
          "language": "scala"
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "title": true,
        "results": [],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379710_-633652939",
      "id": "20161017-212148_1432557096",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Show Tables/Views",
      "text": "%spark.sql\n\nSHOW TABLES\n\n-- Note that flightsWithDelaysTbl is a permanent table instead of a temporary view!",
      "dateUpdated": "Aug 13, 2017 1:11:34 PM",
      "config": {
        "editorSetting": {
          "editOnDblClick": false,
          "language": "sql"
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/sql",
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [
                {
                  "name": "tableName",
                  "index": 0.0,
                  "aggr": "sum"
                }
              ],
              "values": [
                {
                  "name": "isTemporary",
                  "index": 1.0,
                  "aggr": "sum"
                }
              ],
              "groups": [],
              "scatter": {
                "xAxis": {
                  "name": "tableName",
                  "index": 0.0,
                  "aggr": "sum"
                },
                "yAxis": {
                  "name": "isTemporary",
                  "index": 1.0,
                  "aggr": "sum"
                }
              }
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379711_-634037688",
      "id": "20161017-212228_2044087527",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Querying a Permanent Table",
      "text": "%spark.sql\n\nSELECT COUNT(1) AS Total from flightswithdelaystbl  -- As you can see, there\u0027s no difference in querying a temporary view vs a permanent table",
      "dateUpdated": "Aug 13, 2017 1:11:40 PM",
      "config": {
        "editorSetting": {
          "editOnDblClick": false,
          "language": "sql"
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/sql",
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [
                {
                  "name": "Total",
                  "index": 0.0,
                  "aggr": "sum"
                }
              ],
              "values": [],
              "groups": [],
              "scatter": {
                "xAxis": {
                  "name": "Total",
                  "index": 0.0,
                  "aggr": "sum"
                }
              }
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379711_-634037688",
      "id": "20161017-212847_790820933",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Additional Resources",
      "text": "%md\n\nWe hope you\u0027ve enjoyed this introductory lab. Below are additional resources that you should find useful:\n\n1. [Hortonworks Apache Spark Tutorials](http://hortonworks.com/tutorials/#tuts-developers) are your natural next step where you can explore Spark in more depth.\n2. [Hortonworks Community Connection (HCC)](https://community.hortonworks.com/spaces/85/data-science.html?type\u003dquestion) is a great resource for questions and answers on Spark, Data Analytics/Science, and many more Big Data topics.\n3. [Hortonworks Apache Spark Docs](http://docs.hortonworks.com/HDPDocuments/HDP2/HDP-2.5.0/bk_spark-component-guide/content/ch_developing-spark-apps.html) - official Spark documentation.\n4. [Hortonworks Apache Zeppelin Docs](http://docs.hortonworks.com/HDPDocuments/HDP2/HDP-2.5.0/bk_zeppelin-component-guide/content/ch_using_zeppelin.html) - official Zeppelin documentation.",
      "dateUpdated": "Aug 13, 2017 1:14:34 PM",
      "config": {
        "tableHide": true,
        "editorSetting": {
          "editOnDblClick": true,
          "language": "markdown"
        },
        "editorMode": "ace/mode/markdown",
        "colWidth": 10.0,
        "editorHide": false,
        "title": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379711_-634037688",
      "id": "20160410-003138_2048237853",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.pyspark\n\nflights_df \u003d spark.read.option(\"header\", \"true\").option(\"inferSchema\", \"true\").csv(\"/tmp/flights.csv\")\nflights_df.registerTempTable(\"pythontable\")\n\n",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 1:22:34 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502630127816_-1439993044",
      "id": "20170813-131527_213577893",
      "dateCreated": "Aug 13, 2017 1:15:27 PM",
      "dateStarted": "Aug 13, 2017 1:22:34 PM",
      "dateFinished": "Aug 13, 2017 1:22:34 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.sql\n\nselect * from pythontable\n",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 1:23:34 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/sql"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502630503855_-2001971102",
      "id": "20170813-132143_1404058392",
      "dateCreated": "Aug 13, 2017 1:21:43 PM",
      "dateStarted": "Aug 13, 2017 1:23:34 PM",
      "dateFinished": "Aug 13, 2017 1:23:34 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%angular\n\u003c/br\u003e\n\u003ccenter\u003e\n\u003ca href\u003d\"https://community.hortonworks.com/spaces/85/data-science.html?type\u003dquestion\" target\u003d\u0027_blank\u0027\u003e\n  \u003cimg src\u003d\"http://hortonworks.com/wp-content/uploads/2016/03/logo-hcc.png\" alt\u003d\"HCC\" style\u003d\"width:125px;height:125px;border:0;\" align\u003d\"middle\"\u003e\n\u003c/a\u003e\n\u003c/center\u003e",
      "dateUpdated": "Aug 13, 2017 12:46:19 PM",
      "config": {
        "editorSetting": {},
        "editorMode": "ace/mode/scala",
        "colWidth": 2.0,
        "editorHide": true,
        "results": [
          {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "keys": [],
              "values": [],
              "groups": [],
              "scatter": {}
            }
          }
        ],
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502628379712_-648273397",
      "id": "20160410-003138_1663715025",
      "dateCreated": "Aug 13, 2017 12:46:19 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%sh\n\npwd\n",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 1:29:02 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502630765339_385378855",
      "id": "20170813-132605_453381337",
      "dateCreated": "Aug 13, 2017 1:26:05 PM",
      "dateStarted": "Aug 13, 2017 1:29:02 PM",
      "dateFinished": "Aug 13, 2017 1:29:02 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%dep\n",
      "user": "anonymous",
      "dateUpdated": "Aug 13, 2017 5:59:14 PM",
      "config": {},
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1502647154174_905848441",
      "id": "20170813-175914_813395123",
      "dateCreated": "Aug 13, 2017 5:59:14 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "Labs / Spark 2.x / Data Worker / Scala / 101 - Intro to SparkSQL",
  "id": "2CSGRDE7D",
  "angularObjects": {
    "2CQVAAMSF:shared_process": [],
    "2CPJCJQ52:shared_process": [],
    "2CR55RN9F:shared_process": [
      {
        "name": "locations",
        "object": [
          {
            "schema": {
              "fields": [
                {
                  "name": "desc",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": true,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                },
                {
                  "name": "lat",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": true,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                },
                {
                  "name": "lng",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": true,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                }
              ],
              "_hashCode": -1.874643344E9,
              "bitmap$0": 8.0
            },
            "values": [
              "403-Airport (late: 0 mins)",
              "39.95258",
              "-75.18739"
            ]
          },
          {
            "schema": {
              "fields": [
                {
                  "name": "desc",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": true,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                },
                {
                  "name": "lat",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": true,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                },
                {
                  "name": "lng",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": true,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                }
              ],
              "_hashCode": -1.874643344E9,
              "bitmap$0": 8.0
            },
            "values": [
              "405-Airport (late: 1 mins)",
              "40.05972",
              "-75.12936"
            ]
          },
          {
            "schema": {
              "fields": [
                {
                  "name": "desc",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": true,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                },
                {
                  "name": "lat",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": true,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                },
                {
                  "name": "lng",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": true,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                }
              ],
              "_hashCode": -1.874643344E9,
              "bitmap$0": 8.0
            },
            "values": [
              "9740-Temple U (late: 117 mins)",
              "39.98060",
              "-75.14987"
            ]
          }
        ],
        "noteId": "2CSGRDE7D"
      }
    ],
    "2CQ5M8DDR:shared_process": [],
    "2CT12AQEX:shared_process": [],
    "2CR382C2Q:shared_process": [],
    "2CRWTXXDA:shared_process": [],
    "2CPZMEV6C:shared_process": [],
    "2CSJS4NXD:shared_process": []
  },
  "config": {
    "looknfeel": "default",
    "personalizedMode": "false"
  },
  "info": {}
}